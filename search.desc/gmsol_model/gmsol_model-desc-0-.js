searchState.loadedDescShard("gmsol_model", 0, "A Rust implementation of GMX V2 Model.\nContains the error value\nContains the success value\nAlias for result.\nActions.\nBank.\nClock.\nError type.\nFixed-point decimal type.\nMarket.\nNumber utils.\nMarket params.\nPool.\nPosition.\nPrice.\nUtils.\nMarket Action.\nThe type of the execution report of the action.\nDecrease Position.\nDeposit.\nDistribute position impact.\nExecute.\nIncrease Position.\nSwap.\nUpdate borrowing state.\nUpdate funding state.\nWithdraw.\nClaimable collateral amounts.\nSwap collateral token to PnL token.\nDecrease the position.\nDecrease Position Flags.\nDecrease Position Params.\nReport of the execution of position decreasing.\nSwap Type for the decrease position action.\nAn iterator over the variants of DecreasePositionSwapType\nNo swap.\nOutput amounts.\nProcessed PnL.\nSwap PnL token to collateral token.\nGet acceptable price.\nGet claimable collateral for holding.\nGet Get claimable collateral for user.\nGet claimable funding amounts.\nGet execution price.\nGet execution fees.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet initial collateral withdrawal amount.\nGet initial size delta in usd.\nGet initial size delta usd.\nGet insolvent close step.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether capping size_delta_usd is allowed.\nWhether capping size_delta_usd is allowed.\nWhether the action is a full close.\nWhether insolvent close is allowed.\nWhether insolvent close is allowed.\nWhether the order is a liquidation order.\nWhether the order is a liquidation order.\nReturns whether the output token (collateral token) is the …\nReturns whether the secondary output token (pnl token) is …\nCreate a new <code>Pnl</code>.\nGet the output amount.\nGet output amount.\nGet output amounts.\nGet output token amount.\nGet processed pnl.\nGet final pnl value.\nGet price impact diff.\nGet price impact value.\nGet prices.\nGet secondary output amount.\nGet secondary output amount.\nGet secondary output token amount.\nSet the swap type.\nReturns whether the position should be removed.\nGet size delta in tokens.\nGet size delta in usd.\nGet the swap type.\nTry to add amount.\nCreate a new action to decrease the given position.\nGet uncapped pnl value.\nGet withdrawable collateral amount.\nA deposit.\nDeposit params.\nReport of the execution of deposit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet long token amount.\nGet long token fees.\nGet long token price.\nGet minted.\nGet the deposit params.\nGet price impact.\nGet short token amount.\nGet short token fees.\nGet short token price.\nCreate a new deposit to the given market.\nDistribute Position Impact.\nDistribute Position Impact Report.\nGet distribution amount.\nGet considered duration in seconds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet Next position impact pool amount.\nExecution Params for increasing position.\nIncrease the position.\nIncrease Position Params.\nReport of the execution of position increasing.\nGet acceptable price.\nGet claimable funding amounts, returns …\nGet collateral delta amount.\nGet collateral increment amount.\nGet execution params.\nGet execution price.\nGet position fees.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet params.\nGet price impact amount.\nGet price impact value.\nGet prices.\nGet size delta in tokens.\nGet size delta USD.\nCreate a new action to increase the given position.\nA swap.\nSwap params.\nReport of the execution of swap.\nExecute the swap.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the in token is long token.\nGet long token price.\nGet swap params.\nGet the price impact for the swap.\nGet the price impact amount.\nGet short token price.\nGet the amount of in token.\nGet token in fees.\nGet the amount of out token.\nCreate a new swap in the given market.\nUpdate Borrowing Report.\nUpdate Borrowing State Action.\nGet considered duration in seconds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet next cumulative borrowing factor\nCreate a new <code>UpdateBorrowingState</code> action.\nUpdate Funding Report.\nUpdate Funding State Action.\nGet delta to claimable funding amount per size.\nGet delta to funding amount per size.\nGet considered duration in seconds.\nCreate a new empty report.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculate next funding amounts per size.\nGet next funding factor per second.\nGet next funding factor per second.\nPack the value to funding amount per size with the given …\nCreate a new <code>UpdateFundingState</code> action.\nCalculate the funding amount for a position and unpack …\nWithdraw params.\nReport of the execution of withdrawal.\nA withdrawal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet long token fees.\nGet the output amount of long tokens.\nGet long token price.\nGet market token amount to burn.\nGet withdraw params.\nGet short token fees.\nGet the output amount of short tokens.\nGet short token price.\nCreate a new withdrawal from the given market.\nA bank of tokens.\nNumber type.\nGet the balance of the given token.\nGet the balance of the given token excluding <code>excluded</code> …\nRecord transferred in amount by token.\nRecord transferred out amount by token.\nADL updated clock for long.\nADL updated clock for short.\nBorrowing.\nThe kind of clocks.\nAn iterator over the variants of ClockKind\nFunding.\nPrice Impact Distribution.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild params error.\nUnknown computation error.\nConvert error.\nDivided by zero.\nEmpty deposit.\nEmpty swap.\nEmpty withdrawal.\nError type.\nInsufficient funds to pay for cost.\nInsufficient reserve.\nInsufficient reserve for open interest.\nInvalid Argument.\nInvalid pool value.\nInvalid position state.\nInvalid prices.\nInvalid token balance.\nLiquidatable Position.\nMarket errors from [<code>gmsol-utils</code>].\nMax open interest exceeded.\nMax pool amount exceeded.\nMax pool value for deposit exceeded.\nMint receiver not set.\nMissing clock of kind.\nMissing pool of kind.\nNot liquidatable.\nOverflow.\nPnl Factor Exceeded.\nComputation error in pool\nPower computation error.\nAnchor error.\nUnable to get borrowing factor for empty pool value.\nUnable to get funding factor when the open interest is …\nUnimplemented.\nWithdrawal vault not set.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe decimals.\nFixed-point decimal type.\nNumber type with the required properties for implementing …\nThe unit value.\nDecimal type with <code>20</code> decimals and backed by <code>u128</code>\nDecimal type with <code>9</code> decimals and backed by <code>u64</code>\nThe unit value (i.e. the value “one”) which is …\nChecked pow.\nFixed point power.\nReturns the argument unchanged.\nCreate a new decimal from the inner representation.\nGet the internal integer representation.\nCalls <code>U::from(self)</code>.\nGet the inner value.\nBase Market.\nBorrowing fees utils.\nLiquidity Market.\nPerpetual Market.\nPosition impact utils.\nSwap Market.\nBase Market trait.\nExtension trait for <code>BaseMarket</code>.\nBase Market trait for mutable access.\nExtension trait for <code>BaseMarketMut</code>.\nFor auto-deleveraging.\nFor deposit.\nFor withdrawal.\nFor trader.\nMin factor after auto-deleveraging.\nUnsigned number type used in the market.\nPnL factor exceeded.\nPnl Factor Kind.\nAn iterator over the variants of PnlFactorKind\nPool type.\nSigned number type used in the market.\nApply delta to the primary pool.\nApply delta to claimable fee pool.\nGet the claimable fee pool.\nGet the mutable reference of the claimable fee pool.\nGet collateral sum pool.\nGet the exceeded pnl.\nExpected min token balance excluding collateral amount.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns whether ignore open interest for usage factor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the liquidity pool.\nGet the liquidity pool mutably.\nGet max open interest.\nMax PnL factor.\nGet max pool amount.\nGet total open interest as a <code>Balance</code>.\nGet total open interest in tokens as a merged <code>Balance</code>.\nGet the open interest in (index) tokens pool.\nGet the open interest pool.\nGet open interest reserve factor.\nGet total pnl of the market for one side.\nGet pnl factor.\nCurrent PnL factor.\nGet pnl factor config.\nGet the excess of pending pnl.\nGet pnl factor with pool value.\nCurrent pool value.\nGet the usd value of primary pool without pnl for one side.\nGet reserve factor.\nGet reserved value.\nGet the swap impact pool.\nGet total collateral amount for one token side.\nUSD value to market token amount divisor.\nValidate max pnl.\nValidate pnl factor.\nValidate (primary) pool amount.\nValidate reserve.\nA market with borrowing fees.\nExtension trait for <code>BorrowingFeeMarket</code>.\nA market that can update the borrowing fees.\nExtension trait for <code>BorrowingFeeMarketMut</code>.\nGet borrowing factor per second.\nGet borrowing factor pool.\nGet borrowing factor pool mutably.\nGet borrowing fee kink model params.\nGet borrowing fee params.\nGet current borrowing factor.\nGet the just passed time in seconds for the given kind of …\nGet next cumulative borrowing factor of the given side.\nGet the passed time in seconds for the given kind of clock.\nGet total borrowing pool.\nGet total pending borrowing fees.\nCreate a <code>UpdateBorrowingState</code> action.\nA market for providing liquidity.\nExtension trait of <code>LiquidityMarket</code>.\nA market for providing liquidity.\nExtension trait of <code>LiquidityMarketMut</code>.\nPerform burn.\nCreate a <code>Deposit</code> action.\nGet market token price.\nGet max pool value for deposit.\nPerform mint.\nGet the usd value of primary pool.\nGet total supply of the market token.\nValidate (primary) pool value for deposit.\nCreate a <code>Withdrawal</code>.\nA perpetual market.\nExtension trait for <code>PerpMarket</code>.\nA mutable perpetual market.\nExtension trait for <code>PerpMarketMut</code>.\nApply delta to claimable funding amount per size.\nApply delta to funding amount per size.\nCaps negative position price impact in-place. If <code>impact</code> is …\nCaps positive position price impact in-place. If <code>impact</code> is …\nGet claimable funding amount per size pool.\nGet claimable funding amount per size pool mutably.\nGet current claimable funding fee amount per size.\nGet collateral sum pool mutably.\nAdjustment factor for packing funding amount per size.\nGet funding amount per size pool.\nGet funding amount per size pool mutably.\nGet funding factor per second.\nGet funding factor per second mutably.\nGet current funding fee amount per size.\nGet funding fee params.\nGet the just passed time in seconds for the given kind of …\nGet liquidation fee params.\nGet min collateral factor for open interest.\nGet min collateral factor for open interest multiplier.\nInsufficient funding fee payment callback.\nGet mutable reference of open interest pool.\nGet mutable reference of open interest pool.\nGet the order fee params.\nGet basic position params.\nGet total borrowing pool mutably.\nCreate a <code>UpdateFundingState</code> action.\nValidate open interest reserve.\nA market with position impact pool.\nExtension trait of <code>PositionImpactMarket</code>.\nA mutable market with position impact pool.\nExtension trait of <code>PositionImpactMarketMut</code>.\nApply delta to the position impact pool.\nCreate a <code>DistributePositionImpact</code> action.\nGet the just passed time in seconds for the given kind of …\nGet the passed time in seconds for the given kind of clock.\nGet pending position impact pool distribution amount.\nGet position impact distribution params.\nGet the position impact params.\nGet position impact pool.\nGet position impact pool amount.\nGet position impact pool mutably.\nA market for swapping tokens.\nExtension trait for <code>SwapMarket</code>.\nA mutable market for swapping tokens.\nExtension trait for <code>SwapMarketMut</code>.\nApply a swap impact value to the price impact pool.\nCreate a <code>Swap</code>.\nGet the swap fee params.\nGet the swap impact amount with cap.\nGet swap impact params.\nGet the swap impact pool mutably.\nPerform Mul-Div calculation with bigger range num type.\nNum trait used in GMX.\nThe signed type.\nUnsigned value that cannot be negative.\nUnsigned type.\nConvert signed value to unsigned.\nAs divisor to checked divide other and round up magnitude.\nBound the magnitude of a signed value.\nChecked signed add.\nCalculates floor(self * numerator / denominator) with full …\nCalculates ceil(self * numerator / denominator) with full …\nCalculates floor(self * numerator / denominator) with full …\nChecked signed mul.\nChecked round up division.\nCompute signed <code>self - other</code>.\nChecked signed sub.\nCompute the absolute difference of two values.\nConvert to opposite signed.\nConvert to a signed value\nConvert to a signed value with the given sign.\nComputes the absolute value and returns as a unsigned …\nFee Parameters.\nPosition parameters.\nPrice Impact Parameters.\nBorrowing Fee Kink Model Parameters.\nBorrowing Fee Kink Model Parameters for one side.\nBorrowing Fee Parameters.\nBorrowing Fee.\nDecrease.\nFee Parameters.\nFees.\nFunding Fee Parameters.\nFunding Fees.\nFunding Rate Change Type.\nIncrease.\nLiquidation Fee Parameters.\nLiquidation Fees.\nNo Change.\nOrder Fees.\nPosition Fees.\nGet above optimal usage borrowing factor.\nGet funding fee amount.\nApply fees to <code>amount</code>.\nGet base borrowing factor.\nGet position fees with only order fees considered.\nCalculate borrowing factor per second.\nGet borrowing fees.\nCreate a builder for building <code>FeeParams</code>. On the builder, …\nCreate a builder for building <code>BorrowingFeeParams</code>. On the …\nCreate a builder for building <code>BorrowingFeeKinkModelParams</code>. …\nCreate a builder for building …\nCreate a builder for building <code>FundingFeeParams</code>. On the …\nCreate a builder for building <code>LiquidationFeeParams</code>. On the …\nCreate a builder for building <code>FundingFees</code>. On the builder, …\nGet change type for next funding rate.\nGet claimable long token funding fee amount.\nGet claimable short token funding fee amount.\nClear fees excluding funding fee.\nGet funding decrease factor per second.\nGet borrowing exponent factor.\nGet funding exponent factor.\nGet borrowing factor.\nFallback funding factor.\nGet basic fee.\nGet total borrowing fee amount.\nGet total liquidation fee amount.\nGet fee amount for pool.\nGet borrowing fee amount for pool.\nGet liquidation fee amount for pool.\nGet fee amount for receiver\nGet borrowing fee amount for receiver.\nGet liquidation fee amount for receiver.\nGet fee amounts.\nGet order fee value.\nGet total liquidation fee value.\nGet fee for pool.\nGet fee for receiver.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet funding fees.\nGet funding increase factor per second.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet liquidation fees.\nGet max funding factor per second.\nGet min funding factor per second.\nCreate a new <code>Fees</code>.\nGet optimal usage factor.\nGet order fees.\nGet paid order fee value.\nGet receiver factor.\nGet borrowing fee receiver factor.\nGet receiver fee.\nSet borrowing fees.\nSet funding fees.\nSet liquidation fees.\nGet whether to skip borrowing fee for smaller side.\nThreshold for decrease funding.\nThreshold for stable funding.\nGet total cost amount in collateral tokens.\nGet total cost excluding funding fee.\nSet discount factor.\nPosition Impact Distribution Parameters.\nBasic Position Parameters.\nCreate a builder for building <code>PositionParams</code>. On the …\nCreate a builder for building …\nGet distribution rate factor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet max negative position impact factor.\nGet max position impact factor for liquidations.\nGet max positive position impact factor.\nGet min collateral factor.\nGet min collateral value.\nGet min position impact pool amount.\nGet min position size usd.\nCreate a new <code>PositionParams</code>.\nPrice impact parameters.\nGet adjusted swap factors.\nCreate a builder for building <code>PriceImpactParams</code>. On the …\nExponent.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNegative factor.\nPositive factor.\nBorrowing factor.\nClaimable fee.\nClaimable funding amount per size for long.\nClaimable funding amount per size for short.\nCollateral sum for long.\nCollateral sum for short.\nFunding amount per size for long.\nFunding amount per size for short.\nOpen Interest for long.\nOpen Interest for short.\nOpen Interest in tokens for long.\nOpen Interest in tokens for short.\nA balance for holding tokens, usd values, or factors\nExtension trait for <code>Pool</code> with utils.\nPool kind.\nAn iterator over the variants of PoolKind\nPosition impact.\nPrimary liquidity pool.\nSwap impact.\nTotal borrowing.\nApply delta.\nApply delta to long amount.\nApply delta to short amount.\nBalance.\nChecked apply delta amounts.\nDelta.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBalanced amounts.\nExtension trait for <code>Balance</code> with utils.\nMerged balanced pool. A <code>Balance</code> returned by …\nUnsigned number type.\nSigned number type.\nGet amount by side.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the long token amount (when this is a token balance), …\nGet the long amount value in USD.\nMerge the amounts with other <code>Balance</code>.\nGet pool value information after applying delta.\nGet pool value information after applying delta.\nGet the short token amount (when this is a token balance), …\nGet the short amount value in USD.\nDelta Amounts.\nDelta of pool usd values.\nUsd values of pool.\nGet delta values.\nGet usd value (abs) difference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitial diff usd value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether it is a same side rebalance.\nGet long delta amount.\nGet long token usd value.\nCreate a new delta amounts.\nCreate delta amounts for both sides.\nCreate a delta amount for one side.\nCreate a long delta amount.\nCreate a short delta amount.\nNext diff usd value.\nCalculate price impact.\nGet short delta amount.\nGet short token usd value.\nCreate a new <code>PoolDelta</code>.\nCreate a new <code>PoolValue</code> from the given pool and prices.\nCreate a new <code>PoolDelta</code>.\nCollateral Delta Values.\nPrice impact diff.\nFees.\nFunding fees.\nPrice impact.\nInsolvent Close Step.\nWon’t be sufficient.\nLiquidatable reason.\nMarket type.\nMin collateral.\nMin collateral for leverage.\nRemaining collateral not positive.\nUnsigned number type.\nPnL.\nPosition with access to its market.\nExtension trait for <code>Position</code> with utils.\nPosition with mutable access.\nExtension trait for <code>PositionMut</code> with utils.\nRead-only access to the position state.\nExtension trait for <code>PositionState</code>.\nMutable access to the position state.\nSigned number type.\nWill be sufficient.\nWill collateral be sufficient.\nReturns whether the pnl and collateral tokens are the same.\nGet a reference to last borrowing factor applied by the …\nGet a mutable reference to last borrowing factor applied …\nGet capped position price impact usd.\nGet position price impact usd and cap the value if it is …\nCheck if the position is liquidatable.\nGet a reference to claimable funding fee amount per size …\nGet a mutable reference to claimable funding fee amount …\nGet the collateral amount.\nGet a mutable reference to the collateral amount.\nGet collateral price.\nGet collateral value.\nCreate an action to decrease the position.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the funding fee amount per size.\nGet a mutable reference to the funding fee amount per size.\nCreate an action to increase the position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the collateral token is the long token of …\nReturn whether the position is considered to be empty …\nReturns whether the position is a long position.\nReturns whether it is sufficient.\nGet a reference to the market.\nGet a mutable reference to the market.\nCreate a new collateral delta.\nDecreased callback.\nIncreased callback.\nHandle swap error.\nSwapped callback.\nCalled from <code>validate_position</code> to add supplementary checks.\nGet pending borrowing fee value of this position.\nGet pending funding fees.\nCalculate the pnl value when decreased by the given delta …\nCalculates the <code>PositionFees</code> generated by changing the …\nGet position price impact.\nGet a reference to the size (in tokens) of the position.\nGet a mutable reference to the size (in tokens) of the …\nGet a reference to the size (in USD) of the position.\nGet a mutable reference to the size (in USD) of the …\nUpdate global open interest.\nUpdate total borrowing.\nValidate the position.\nCheck that whether the collateral will be sufficient after …\nPrice.\nPrices for execution.\nGet mid price checked.\nGet collateral token price.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn whether the min price or max price is zero.\nIndex token price.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the prices is valid.\nLong token price.\nMaximum Price.\nGet mid price.\nMinimum Price.\nPick price.\nPick price for PnL.\nShort token price.\nValidate the prices.\nApply exponent factor using this formula: <code>x^E</code>.\nApply factor using this formula: <code>A * x</code>.\nApply factors using this formula: <code>A * x^E</code>.\nConvert the <code>value</code> to a factor after dividing by the <code>divisor</code>…\nConvert the <code>value</code> to a factor after dividing by the <code>divisor</code>…\nMarket token amount to usd value.\nUsd value to market token amount.")