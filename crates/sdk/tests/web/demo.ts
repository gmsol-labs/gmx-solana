import {
  apply_factor,
  close_orders,
  create_orders,
  create_orders_builder,
  create_deposits,
  default_store_program,
  Market,
  MarketGraph,
  Position,
  Pubkey,
  TradeEvent,
  update_orders,
} from "../../pkg/index.js";

function toBase64(data: number[]): string {
  const uint8 = new Uint8Array(data);

  const binary = String.fromCharCode(...uint8);

  return btoa(binary);
}

// Apply factor.
const result = apply_factor(123n, 90_000_000_000_000_000_000n);
console.log("apply factor:", result);

// Get default store program and store address.
console.log(default_store_program());

const encodedMarket =
  "";

const encodedPosition =
  "qryP5HpA99AAAKonnS1zO8jxwBSrN6JWJCEcqXbLGZ7GLqJ5zd5Y9p41AQAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMKhMtqEXwT4SYzrEExJSClgE9XJbT3T05sgeb6VBv6xBpuIV/6rgYT7aH9jRhjANdrEOdwa6ztVmKDwAAAAAAEBAAAAAAAAAAIAAAAAAAAABAAAAAAAAAADAAAAAAAAAABe0LIAAAAAAAAAAAAAAAAAKd4HAAAAAAAAAAAAAAAAAADQafqNC/LzAAAAAAAAAAAATDG42aeYAAAAAAAAAAAAAEvkKAAbAAAAAAAAAAAAAACC3+QNRwAAAAAAAAAAAACg8AOnv

const encodedTradeEvent =
  "vdt/007mYe4EAAAAAAAAAIkEAAAAAAAAiuHztSTsoCdXd7+bFfgKkpK2s8Ekmu0xYxJ1oDwLWIqqJ50tczvI8cAUqzeiViQhHKl2yxmexi6iec3eWPaeNcKhMtqEXwT4SYzrEExJSClgE9XJbT3T05sgeb6VBv6xqwA6yS5PboFFwCb6q63SgaG0W0GzASnj1U+pUGxKJsewFnd5vBDNdtngw5sDKxLvMoy5yp++cuXkfJHeKTQhN2ticm3+24sDA+6uFBYcYV5mId2KbkIVNp0FQMN2GYEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB498JoAAAAABLx0hUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJBAAAAAAAAHj3wmgAAAAAEvHSFQAAAAAAAAAAAAAAAAYOKqkEAAAAAAAAAAAAAADN95EFAAAAAAAAAAAAAAAAAEjLH5rz1n1IBgAAAAAAAKXVoc0bPUcIAAAAAAAAAAAn98yvXHgRAAAAAAAAAAAAUNQN8hDqlQAAAAAAAAAAAPescRKCWnMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoDI0HFkBAAAAAAAAAAAAAGCwVWJZAQAAAAAAAAAAAABAnF4AsBQAAAAAAAAAAAAAAO8SSLAUAAAAAAAAAAAAAACOC27tWgAAAAAAAAAAAAAAF11d8VoAAAAAAAAAAAAAhkhbHFkBAAAAAAAAAAAAABZ3LQg0UbYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADfOgEAAAAAAAAAAAAAAAAA8oYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";

const supply = 79185141665179n;

// Decode Market from base64 data.
const market = Market.decode_from_base64(encodedMarket);
const model = market.to_model(supply);
const prices = {
  index_token: {
    min: 1560019900000n,
    max: 1561071800000n,
  },
  long_token: {
    min: 14776017000000n,
    max: 14778132000000n,
  },
  short_token: {
    min: 99989200000000n,
    max: 100004200000000n,
  },
};

// Calculate market token price.
const price = model.market_token_price({
  prices,
  maximize: true,
  pnl_factor: "max_after_deposit",
});
console.log("market token price:", price);

// Calculate market status.
console.log("market status:", model.status({ prices }));

// Create a MarketGraph.
const graph = new MarketGraph({
  swap_estimation_params: {
    value: 1_000_000_000_000_000_000_000n,
    base_cost: 1_000_000_000_000_000_000n,
  },
  max_steps: 5,
});

// Insert market from base64 data.
graph.insert_market_from_base64(encodedMarket, supply);

console.log(graph.market_tokens().map((token) => token.toString()));

const gmx = "GmxDsqjKYUrwgbvccGrpF1LoyHPUq8FQqT1FJfkvrMfY";
const wsol = "So11111111111111111111111111111111111111112";
const usdc = "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";

graph.update_token_price(gmx, { ...prices.index_token });
graph.update_token_price(wsol, { ...prices.long_token });
graph.update_token_price(usdc, { ...prices.short_token });

// Calculate best swap path.
const { path } = graph.best_swap_path(
  "So11111111111111111111111111111111111111112",
  "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
  false
);
console.log(path.map((token) => new Pubkey(token).toString()));

// Decode position from base64 data.
const position = Position.decode_from_base64(encodedPosition);
const positionModel = position.to_model(model);
console.log("size:", positionModel.size());
console.log("size_in_tokens:", positionModel.size_in_tokens());
console.log("collateral amount:", positionModel.collateral_amount());
console.log("status:", positionModel.status(prices));

// Simulate order.
const simulator = graph.to_simulator();
const simulationOutput = simulator.simulate_order(
  {
    kind: "MarketIncrease",
    params: {
      market_token: "E6kfBQcdHL3fdWNaydrWViXVtQLTgpxzZicLy98ZNc5v",
      is_long: true,
      size: 100_000_000_000_000_000_000_000n,
      amount: 10_000_000n,
    },
    collateral_or_swap_out_token: wsol,
  },
  position
);
console.log("simulation:", simulationOutput.increase());
let outputPositionModel = simulationOutput.position_model()!;
console.log("output position:", outputPositionModel.size());

// Create order.
const recentBlockhash = "3KarAamyLd6dFFmMsh79fXjrdAWp5DB6dxF3BgLK3SuM";
const payer = "11111111111111111111111111111112";
// Use the real market token from the decoded/inserted market
const marketToken = market.market_token_address();
const transactions = create_orders(
  "MarketIncrease",
  [
    {
      market_token: marketToken,
      is_long: true,
      size: 100_000_000_000_000_000_000_000n,
      amount: 10_000_000n,
    },
  ],
  {
    recent_blockhash: recentBlockhash,
    payer,
    collateral_or_swap_out_token: wsol,
    compute_unit_price_micro_lamports: 2000000,
    hints: new Map([
      [
        marketToken,
        {
          long_token: wsol,
          short_token: usdc,
        },
      ],
    ]),
    transaction_group: {
      memo: "aBsLTf/2DhUG5rg79iU+vUDAXkk=",
    },
  }
);

console.log("create orders");
for (const batch of transactions.serialize()) {
  for (const txn of batch) {
    console.log(toBase64(txn));
  }
}

// Create multiple orders.
const multipleBuilder = create_orders_builder(
  "MarketIncrease",
  [
    {
      market_token: marketToken,
      is_long: true,
      size: 100_000_000_000_000_000_000_000n,
      amount: 10_000_000n,
    },
  ],
  {
    recent_blockhash: recentBlockhash,
    payer,
    collateral_or_swap_out_token: wsol,
    hints: new Map([
      [
        marketToken,
        {
          long_token: wsol,
          short_token: usdc,
        },
      ],
    ]),
  }
);
const tpBuilder = create_orders_builder(
  "LimitDecrease",
  [
    {
      market_token: marketToken,
      is_long: true,
      size: 100_000_000_000_000_000_000_000n,
      amount: 10_000_000n,
      trigger_price: 23_000_000_000_000n,
    },
  ],
  {
    recent_blockhash: recentBlockhash,
    payer,
    collateral_or_swap_out_token: wsol,
    hints: new Map([
      [
        marketToken,
        {
          long_token: wsol,
          short_token: usdc,
        },
      ],
    ]),
  }
);
const slBuilder = create_orders_builder(
  "StopLossDecrease",
  [
    {
      market_token: marketToken,
      is_long: true,
      size: 100_000_000_000_000_000_000_000n,
      amount: 10_000_000n,
      trigger_price: 10_000_000_000_000n,
    },
  ],
  {
    recent_blockhash: recentBlockhash,
    payer,
    collateral_or_swap_out_token: wsol,
    hints: new Map([
      [
        marketToken,
        {
          long_token: wsol,
          short_token: usdc,
        },
      ],
    ]),
  }
);

multipleBuilder.merge(tpBuilder);
multipleBuilder.merge(slBuilder);

const multipleTransactions = multipleBuilder.build_with_options(
  {},
  {
    recent_blockhash: recentBlockhash,
    compute_unit_price_micro_lamports: 2000000,
  }
);

console.log("create multiple orders");

for (const batch of multipleTransactions.serialize()) {
  for (const txn of batch) {
    console.log(toBase64(txn));
  }
}

// Close orders.
const closeOrders = close_orders({
  recent_blockhash: recentBlockhash,
  payer,
  orders: new Map([
    [
      "11111111111111111111111111111113",
      {
        owner: payer,
        receiver: payer,
        rent_receiver: payer,
        referrer: undefined,
        initial_collateral_token: wsol,
        final_output_token: undefined,
        long_token: wsol,
        short_token: usdc,
        should_unwrap_native_token: true,
        callback: undefined,
      },
    ],
    [
      "11111111111111111111111111111114",
      {
        owner: payer,
        receiver: payer,
        rent_receiver: payer,
        referrer: "11111111111111111111111111111115",
        initial_collateral_token: wsol,
        final_output_token: undefined,
        long_token: usdc,
        short_token: usdc,
        should_unwrap_native_token: false,
        callback: undefined,
      },
    ],
  ]),
});

console.log("close orders");
for (const batch of closeOrders.serialize()) {
  for (const txn of batch) {
    console.log(toBase64(txn));
  }
}

// Update orders.
const updateOrders = update_orders({
  recent_blockhash: recentBlockhash,
  payer,
  orders: new Map([
    [
      "11111111111111111111111111111113",
      {
        params: {
          size_delta_value: 100_000_000_000_000_000_000_000n,
        },
        hint: {
          market_token: market.market_token_address(),
          callback: undefined,
        },
      },
    ],
    [
      "11111111111111111111111111111114",
      {
        params: {
          trigger_price: 1561071800000n,
        },
        hint: {
          market_token: market.market_token_address(),
          callback: undefined,
        },
      },
    ],
  ]),
});

console.log("update orders");
for (const batch of updateOrders.serialize()) {
  for (const txn of batch) {
    console.log(toBase64(txn));
  }
}

console.log("create position from trade event");
const tradeEvent =
  TradeEvent.decode_from_base64_with_options(encodedTradeEvent);
const tradeEventPosition = tradeEvent.to_position_model(model);
console.log("size:", tradeEventPosition.size());
console.log("size_in_tokens:", tradeEventPosition.size_in_tokens());
console.log("collateral amount:", tradeEventPosition.collateral_amount());

// Create deposits (minimal check)
const depositGroup = create_deposits(
  [
    {
      market_token: marketToken,
      receiver: payer,
      long_pay_token: wsol,
      short_pay_token: usdc,
      long_swap_path: [],
      short_swap_path: [],
      long_pay_amount: 1_000_000,
      short_pay_amount: 0,
      min_receive_amount: 0,
      unwrap_native_on_receive: true,
    },
  ],
  {
    recent_blockhash: recentBlockhash,
    payer,
    hints: new Map([
      [
        marketToken,
        {
          pool_tokens: {
            long_token: wsol,
            short_token: usdc,
          },
        },
      ],
    ]),
    transaction_group: {},
  }
);

console.log("create deposits");
for (const batch of depositGroup.serialize()) {
  for (const txn of batch) {
    console.log(toBase64(txn));
  }
}

try {
  const gmDeposit = graph.simulate_deposit_exact({
    market_token: marketToken,
    long_amount: 1_000_000n,
    short_amount: 2_000_000n,
    include_virtual_inventory_impact: true,
  });
  console.log("gm deposit exact:", gmDeposit);

  const gmWithdrawal = graph.simulate_withdrawal_exact({
    market_token: marketToken,
    market_token_amount: 1_000_000n,
  });
  console.log("gm withdrawal exact:", gmWithdrawal);

  const glvComponents = [
    {
      market_token: marketToken,
      balance: 1_000_000,
      pool_value: 10_000_000_000n,
      supply: 1_000_000,
    },
  ];

  const glvDeposit = graph.simulate_glv_deposit_exact({
    market_token: marketToken,
    long_amount: 1_000_000n,
    short_amount: 0n,
    market_token_amount: 1_000_000n,
    glv_supply: 1_000_000,
    components: glvComponents,
    include_virtual_inventory_impact: true,
  });
  console.log("glv deposit exact:", glvDeposit);

  const glvWithdrawal = graph.simulate_glv_withdrawal_exact({
    market_token: marketToken,
    glv_token_amount: 10_000,
    glv_supply: 1_000_000,
    components: glvComponents,
  });
  console.log("glv withdrawal exact:", glvWithdrawal);

  const lpDepositLegs = graph.simulate_deposit_swaps({
    long: { source_token: wsol, amount: 1_000_000n, swap_path: [] },
    short: { source_token: usdc, amount: 2_000_000n, swap_path: [] },
  });
  console.log("lp deposit legs:", lpDepositLegs);

  const lpWithdrawalLegs = graph.simulate_withdrawal_swaps({
    long: { source_token: wsol, amount: 500_000n, swap_path: [] },
    short: { source_token: usdc, amount: 500_000n, swap_path: [] },
  });
  console.log("lp withdrawal legs:", lpWithdrawalLegs);

  const glvLpDepositLegs = graph.simulate_glv_deposit_swaps({
    long: { source_token: wsol, amount: 1_000_000n, swap_path: [] },
    short: { source_token: usdc, amount: 1_000_000n, swap_path: [] },
  });
  console.log("glv lp deposit legs:", glvLpDepositLegs);

  const glvLpWithdrawalLegs = graph.simulate_glv_withdrawal_swaps({
    long: { source_token: wsol, amount: 1_000_000n, swap_path: [] },
    short: { source_token: usdc, amount: 1_000_000n, swap_path: [] },
  });
  console.log("glv lp withdrawal legs:", glvLpWithdrawalLegs);
} catch (e) {
  console.error("smoke tests error:", e);
}
