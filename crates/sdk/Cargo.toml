[package]
name = "gmsol-sdk"
documentation = "https://docs.rs/gmsol-sdk"
version.workspace = true
edition.workspace = true
license-file.workspace = true
description.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["market-graph"]
treasury = ["gmsol-programs/treasury", "gmsol-utils/treasury"]
timelock = ["gmsol-programs/timelock", "gmsol-utils/instruction"]
competition = ["gmsol-programs/competition"]
liquidity-provider = ["gmsol-programs/liquidity-provider"]
devnet = ["gmsol-utils/devnet", "switchboard-on-demand-client?/devnet"]
js = [
    "market-graph",
    "wasm-bindgen",
    "serde",
    "serde-wasm-bindgen",
    "gmsol-programs/wasm-bindgen",
    "gmsol-programs/utils",
    "gmsol-programs/gmsol-utils",
    "tsify-next/wasm-bindgen",
    "gmsol-model/js",
    "gmsol-model/solana",
    "bincode",
]
serde = [
    "dep:serde",
    "gmsol-model/serde",
    "gmsol-solana-utils/serde",
    "gmsol-utils/serde",
    "serde_with",
    "rust_decimal/serde-with-str",
    "indexmap/serde",
]
market-graph = ["petgraph", "rust_decimal/maths"]
client = [
    "gmsol-solana-utils/make-bundle-builder",
    "gmsol-solana-utils/anchor",
    "gmsol-utils/debug",
    "gmsol-utils/display",
    "gmsol-model/strum",
    "treasury",
    "timelock",
    "tracing",
    "serde",
    "serde_json",
    "futures-util",
    "tokio",
    "tokio-stream",
    "solana-client",
    "solana-account-decoder",
    "solana-transaction-status",
    "async-stream",
    "time",
]
decode = ["gmsol-decode"]
chainlink = [
    "gmsol-chainlink-datastreams/gmsol",
    "reqwest",
    "reqwest-websocket",
    "sha2",
    "hmac",
]
pyth = [
    "pyth-sdk",
    "pyth-solana-receiver-sdk",
    "pythnet-sdk",
    "eventsource-stream",
    "byteorder",
    "reqwest/stream",
]
switchboard = ["switchboard-on-demand-client"]
squads = []
discover = ["client", "tower/discover", "tokio/time", "pin-project-lite"]
clap = ["dep:clap", "gmsol-utils/clap"]
openssl-vendored = [
    "solana-sdk/openssl-vendored",
    "gmsol-solana-utils/openssl-vendored",
]
http-rpc-sender = ["gmsol-solana-utils/http-rpc-sender"]

[dependencies]
gmsol-utils = { workspace = true, features = ["enum-iter", "debug"] }
gmsol-programs = { workspace = true, features = [
    "model",
    "utils",
    "gmsol-utils",
] }
gmsol-model = { workspace = true, features = ["u128", "strum"] }
gmsol-solana-utils = { workspace = true, features = [
    "client-traits",
    "anchor-lang",
] }
gmsol-decode = { workspace = true, optional = true, features = [
    "gmsol-programs",
    "solana-decoder",
] }
thiserror = { workspace = true }
base64 = { workspace = true }
solana-sdk = { workspace = true }
anchor-spl = { workspace = true, default-features = false, features = [
    "token",
    "token_2022",
    "associated_token",
    "metadata",
] }
anchor-lang = { workspace = true, features = ["derive"] }
borsh = { workspace = true }
either = { workspace = true }
rust_decimal = { workspace = true, default_features = false, features = [
    "std",
] }
typed-builder = { workspace = true }
rand = { workspace = true }
cfg-if = { workspace = true }
bs58 = { workspace = true }
indexmap = { workspace = true }
strum = { workspace = true }
hex = { workspace = true }
bytes = { workspace = true }

tracing = { workspace = true, optional = true }
reqwest = { workspace = true, optional = true, features = ["json"] }
reqwest-websocket = { workspace = true, optional = true }
clap = { workspace = true, optional = true, features = ["derive"] }

# Dependencies for the `js` feature
wasm-bindgen = { workspace = true, optional = true }
serde-wasm-bindgen = { workspace = true, optional = true }
tsify-next = { workspace = true, optional = true, features = ["js"] }
bincode = { workspace = true, optional = true }

# Dependencies for the `serde` feature
serde = { workspace = true, optional = true, features = ["derive"] }
serde_with = { workspace = true, optional = true }

# Dependencies for the `market-graph` feature
petgraph = { workspace = true, optional = true, default-features = false, features = [
    "stable_graph",
] }

# Dependencies for the `client` feature
futures-util = { workspace = true, optional = true }
tokio = { workspace = true, optional = true, features = ["full"] }
tokio-stream = { workspace = true, optional = true, features = ["sync"] }
solana-client = { workspace = true, optional = true }
solana-account-decoder = { workspace = true, optional = true }
solana-transaction-status = { workspace = true, optional = true }
serde_json = { workspace = true, optional = true }
async-stream = { workspace = true, optional = true }
time = { workspace = true, optional = true }

# Dependencies for `chainlink` feature
gmsol-chainlink-datastreams = { workspace = true, optional = true }
sha2 = { workspace = true, optional = true }
hmac = { workspace = true, optional = true }

# Dependencies for `pyth` feature
pyth-sdk = { workspace = true, optional = true }
pythnet-sdk = { workspace = true, optional = true }
pyth-solana-receiver-sdk = { workspace = true, optional = true }
eventsource-stream = { workspace = true, optional = true }
byteorder = { workspace = true, optional = true }

# Dependencies for `switchboard` feature
switchboard-on-demand-client = { workspace = true, optional = true }

# Dependencies for `discover` feature
tower = { workspace = true, optional = true }
pin-project-lite = { workspace = true, optional = true }

[build-dependencies]
cfg_aliases = { workspace = true }

[dev-dependencies]
gmsol-solana-utils = { workspace = true, features = ["http-rpc-sender"] }

rust_decimal_macros = { workspace = true }
tracing = { workspace = true }
tracing-subscriber = { workspace = true, features = ["env-filter"] }
wasm-bindgen-test = { workspace = true }
serde_json = { workspace = true }
eyre = { workspace = true }

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
tokio = { workspace = true, features = [
    "macros",
    "rt",
    "sync",
], default-features = false }

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
tokio = { workspace = true, features = [
    "time",
    "rt",
    "macros",
    "sync",
    "rt-multi-thread",
] }

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
