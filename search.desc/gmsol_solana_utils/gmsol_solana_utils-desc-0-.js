searchState.loadedDescShard("gmsol_solana_utils", 0, "GMSOL Solana Utils\nContains the error value\nContains the success value\nResult type.\nAddress Lookup Table.\nTransaction bundle builder.\nRPC client extension.\nCluster.\nCompute budget.\nError type.\nInstruction Group.\nBundler for bundle builders.\nProgram.\nSigner.\nTransaction builder.\nTransaction Group.\nUtils.\nAddress Lookup Tables.\nReturns an iterator of accounts.\nAdd a LUT.\nReturns unique addresses.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether the LUT list is empty.\nReturns the number of LUTs.\nBuidler for transaction bundle.\nBundle Options.\nCreate Bundle Options.\nSend Bundle Options.\nInsert all the instructions of <code>other</code> into <code>self</code>.\nGet the client.\nCluster.\nCommitment config.\nSet the min priority lamports. <code>None</code> means the value is …\nSet the compute unit price.\nRPC config.\nWhether to continue on error.\nWhether to trace transaction error.\nEstimate execution fee.\nWhether to force one transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>BundleBuilder</code> from <code>RpcClient</code>.\nCreate a new <code>BundleBuilder</code> from <code>RpcClient</code> with the given …\nCluster of the inspector url.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet back all collected <code>TransactionBuilder</code>s.\nIs empty.\nMax number of instructions for one transaction.\nMax packet size.\nCreate a new <code>BundleBuilder</code> for the given cluster.\nCreate a new <code>BundleBuilder</code> with the given options.\nBundle options.\nGet packet size.\nPush a <code>TransactionBuilder</code>.\nPush <code>TransactionBuilder</code>s.\nSend all in order and returns the signatures of the …\nSend all in order with the given options and returns the …\nSet options.\nTry clone empty.\nTry to push a <code>TransactionBuilder</code> to the builder.\nPush a <code>TransactionBuilder</code> with options.\nWhether to update recent block hash before send.\nWhether to send without compute budget.\nAdd <code>send_and_confirm_transaction_with_config</code> method.\nSend and confirm a transaction.\nCluster.\nCustom.\nDebug.\nDevnet.\nLocalnet.\nMainnet.\nTestnet.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a Solana RPC Client.\nGet RPC url.\nGet Websocket url.\nCompute Budget.\nMinimum priority lamports.\nMax compute unit.\nBuild compute budget instructions.\nEstimate priority fee.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet compute unit limit.\nGet compute unit price in mciro lamports.\nSet compute unit limit.\nSet min priority lamports.\nSet compute unit price.\nSet compute units limit.\nSet min priority lamports.\nSet compute unit price.\nAdd transaction error.\nClient error.\nCompile message error.\nCustom error.\nError type.\nMerge transaction error.\nParse cluster error.\nParse url error.\nSigner error.\nCreate a custom error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA group of instructions that are expected to be executed …\nOptions for getting instructions.\nHint.\nA trait representing types that can be converted into …\nA group of atomic instructions that can be executed in …\nAdd an instruction.\nAdd an <code>AtomicGroup</code>.\nAdd an owned signer.\nAdd a signer.\nGet compute budget.\nGet mutable reference to the compute budget.\nCompute unit price in micro lamports.\nReturns signers that need to be provided externally …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns instructions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into <code>AtomicGroup</code>s.\nIf set, a memo will be included in the final transaction.\nMerge two <code>AtomicGroup</code>s.\nCreate versioned message with the given blockhash and …\nCreate a new empty group.\nCreate partially signed transaction with the given …\nReturns the pubkey of the payer.\nEstimates the transaciton size.\nEstimates the transaction size after merge.\nCreate from an iterator of instructions.\nWithout compute budget instruction.\nBuilder for <code>BundleBuilder</code>s.\nExtension trait for <code>MakeBundleBuilder</code>.\nMake bundle builder that can only be used once.\nBuild.\nBuild with options.\nEstimate Execution Fee.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a <code>MakeBundleBuilder</code> from a <code>BundleBuilder</code>.\nSurround transaction.\nSurround the current builder.\nEstimate Execution Fee.\nSet Execution Fee.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether the execution fee needed to be estiamted.\nEstiamte fee before building the transaction.\nSet execution fee.\nSurround transaction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAppend a transaction to the post-transaction list.\nPrepend a transaction to the pre-transaction list.\nProgram.\nReturns the argument unchanged.\nGet the program id.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Program</code>.\nGet the pubkey of the payer.\nCreate a Solana RPC Client.\nCreate a <code>TransactionBuilder</code>.\nBoxed Clonable Signer.\nBoxed signer.\nClonable Signer.\nBoxed Signer.\nShared Signer.\nTransaction Signers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a signer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate from <code>impl Signer</code>.\nCreate a new shared signer.\nSign the given <code>AtomicGroup</code>.\nWallet Config.\nA builder for a transaction.\nAppend accounts for the main instruction.\nAppend accounts for the main instruction.\nSet arguments for the main instruction.\nSet arguments for the main instruction.\nClear the output.\nGet cluster.\nSet cluster.\nGet commitment config.\nSet compute budget.\nGet mutable reference to the compute budget.\nEstimated the execution fee of the result transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet complete lookup table.\nGet luts.\nGet the output.\nGet the pubkey of the payer.\nConstruct all instructions.\nConstruct all instructions with options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a <code>BundleBuilder</code>.\nConvert into a <code>BundleBuilder</code> with the given options.\nInsert an address lookup table account.\nInsert many address lookup tables.\nMerge other <code>TransactionBuilder</code>. The rpc fields will be …\nGet versioned message with the given hash and options.\nGet versioned message with options.\nCreate a new wallet config.\nCreate a new transaction builder.\nSet commiment options.\nSet the output.\nAdd a owned sigenr to the signer list.\nGet payer pubkey.\nSet payer.\nInsert an instruction before the “main” instruction.\nInsert instructions before the “main” instruction.\nSet program id.\nCreate a Solana RPC Client.\nBuild and send the transaction with default options.\nSign and send the transaction with options.\nBuild and send the transaction without preflight.\nSet cluster.\nSet options.\nSet payer.\nGet signed transaction with blockhash and options.\nGet signed transactoin with options.\nAdd a signer to the signer list.\nSet the output and return the previous.\nTake and construct the “main” instruction if present.\nEstimates the size of the result transaction.\nMerge other <code>TransactionBuilder</code>. The rpc fields will be …\nTransaction Group.\nTransaction Group Iter.\nTransaction Group Options.\nAdd a <code>ParallelGroup</code>.\nCompute unit price in micro lamports.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax instructions per transaction.\nMax transaction size.\nMemo for each transaction in this group.\nOptimize the transactions by repacking instructions to …\nBuild transactions.\nReturns <code>Ok</code> if the given <code>ParallelGroup</code> can be added without …\nCreate with the given <code>TransactionGroupOptions</code> and …\nInspect.\nTransaction size calculator.\nWith slot.\nGenerate inspector url or encoded transaction message for …\nEstimated the size of the result transaction.\nWith Slot.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInto value.\nApply a function on the value.\nCreate a new <code>WithSlot</code>.\nGet slot.\nGet the mutable reference of the slot.\nSplit.\nTranspose.\nGet value.\nGet the mutable reference for the value.")