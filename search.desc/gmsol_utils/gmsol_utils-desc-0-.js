searchState.loadedDescShard("gmsol_utils", 0, "Already Exist.\nExceed length limit.\nGeneral-purpose errors.\nDefinitions related to action.\nA <code>slice::chunk_by</code> implementation, copied from <code>std</code>.\nDefinitions related to global configurations.\nUtils for dynamic access to an array of zero copy types.\nFixed-size zero copy map.\nFixed str.\nZero-copy flags.\nReturns the argument unchanged.\nDefinitions related to GLV.\nUtils for GT.\nDefinition for <code>InitSpace</code>.\nDefinitions related to instructions.\nCalls <code>U::from(self)</code>.\nDefinitions related to market.\nGets the name of this [#enum_name].\nOracle utils.\nDefinitions related to order.\nUtils for price representation.\nPubkey utils.\nDefinitions related to roles.\nSwap parameters.\nConvert a string to a seed.\nDefinitions related to token config.\nAction error.\nAction Flags.\nAction State.\nCancelled.\nCompleted.\nMax number of aciton flags.\nPending.\nPreconditions are not met.\nShould unwrap native token.\nTransition to Cancelled State.\nTransition to Completed State.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the state is cancelled.\nCheck if the state is completed.\nCheck if the state is completed or cancelled.\nCheck if the state is pending.\nIterator returns by <code>chunk_by</code>.\nA <code>slice::chunk_by</code> implementation, copied from <code>std</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAction Disabled Flag.\nAn iterator over the variants of ActionDisabledFlag\nAddress keys.\nAn iterator over the variants of AddressKey\nMax ADL prices staleness (seconds).\nAmount keys.\nAn iterator over the variants of AmountKey\nAuto-deleveraging Order.\nCancel.\nClaimable time window (seconds).\nConfig error.\nCreate.\nDefault Action.\nDeposit.\nDomain Disabled Flag.\nAn iterator over the variants of DomainDisabledFlag\nExecute.\nFactor keys.\nAn iterator over the variants of FactorKey\nGLV deposit.\nGLV shift.\nGLV withdrawal.\nHolding.\nLimit Decrease Order.\nLimit Increase Order.\nLimit Swap Order.\nLiquidation Order.\nMarket Decrease Order.\nMarket Increase Order.\nMarket Swap Order.\nOracle max age (seconds).\nMax timestamp excess for oracle timestamp (seconds).\nOracle max timestamp range (seconds).\nOracle Ref Price Deviation.\nOrder fee discount for referred user.\nRecent time window (seconds).\nRequest expiration (seconds).\nShift.\nStop-loss Decrease Order.\nUnsupported domain.\nUpdate.\nWithdrawal.\nDisplay feature.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet at index.\nGet mutablely at index.\nConvert to fixed-size key.\nExceed max length limit.\nInvalid format.\nUtf8 Error.\nBytes to fixed size string.\nFixed size string to bytes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGLV Market Config Flag.\nAn iterator over the variants of GlvMarketFlag\nIs deposit allowed.\nMax number of flags for GLV markets.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet time window index.\nInit Space.\nAlias of <code>Space</code>.\nFailed to get wallet.\nInstruction Access.\nInstruction Account.\nFlags of Instruction Accounts.\nFlags container generated by the macro.\nInstruction error.\nIs signer.\nIs mutable.\nGet accounts.\nGet data.\nFlags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nGet flag.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nGet the number of accounts.\nGet program ID.\nPubkey.\nSet flag.\nConvert to instruction.\nGet wallet.\nBorrowing fee above optimal usage factor for long.\nBorrowing fee above optimal usage factor for short.\nBorrowing fee base factor for long.\nBorrowing fee base factor for short.\nBorrowing fee exponent for long.\nBorrowing fee exponent for short.\nBorrowing fee factor for long.\nBorrowing fee factor for short.\nBorrowing fee optimal usage factor for long.\nBorrowing fee optimal usage factor for short.\nBorrowing fee receiver factor.\nFunding fee decrease factor per second.\nFunding fee exponent.\nFunding fee factor.\nFunding fee increase factor per second.\nFunding fee max factor per second.\nFunding fee min factor per second.\nFunding fee threshold for decrease funding.\nFunding fee threshold for stable funding.\nType that has market meta.\nIgnore open interest for usage factor.\nLiquidation fee factor.\nLiquidation fee receiver factor.\nMax number of config flags.\nMarket Config Flags.\nAn iterator over the variants of MarketConfigFlag\nMarket config keys.\nAn iterator over the variants of MarketConfigKey\nMarket error.\nMarket Metadata.\nMax negative position impact factor.\nMax open interest for long.\nMax open interest for short.\nMax PNL factor for long ADL.\nMax PNL factor for long deposit.\nMax PNL factor for long trader.\nMax PNL factor for long withdrawal.\nMax PNL factor for short ADL.\nMax PNL factor for short deposit.\nMax PNL factor for short trader.\nMax PNL factor for short withdrawal.\nMax pool amount for long token.\nMax pool amount for short token.\nMax pool value for deposit for long token.\nMax pool value for deposit for short token.\nMax position impact factor for liquidations.\nMax positive position impact factor.\nMin collateral factor.\nMin collateral factor for open interest multiplier for …\nMin collateral factor for open interest multiplier for …\nMin collateral value.\nMin PNL factor after long ADL.\nMin PNL factor after short ADL.\nMin position impact pool amount.\nMin position size usd.\nMin tokens for first deposit.\nNot a collateral token.\nOpen interest reserve factor.\nOrder fee factor for negative impact.\nOrder fee factor for positive impact.\nOrder fee receiver factor.\nPosition impact distribute factor.\nPosition impact exponent.\nPosition impact negative factor.\nPosition impact positive factor.\nReserve factor.\nSkip borrowing fee for smaller side.\nSwap fee factor for negative impact.\nSwap fee factor for positive impact.\nSwap fee receiver factor.\nSwap impact exponent.\nSwap impact negative factor.\nSwap impact positive factor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex token.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the given token is a valid collateral token.\nLong token.\nMarket token.\nGet opposite token.\nGet related tokens from markets in order.\nGet ordered token set.\nGet pnl token.\nShort token.\nCheck if the given token is long token or short token, and …\nChainlink Data Feed.\nChainlink Data Streams.\nInvalid price feed price.\nOracle error.\nSupported Price Provider Kind.\nAn iterator over the variants of PriceProviderKind\nPyth Oracle V2.\nSwitchboard On-Demand (V3) Data Feed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPyth price value to decimal.\nConvert pyth price value with confidence to <code>Price</code>.\nAutoDeleverage.\nAuto-deleveraging Order.\nLimit Decrease.\nLimit Increase.\nLimit Swap.\nLiquidate.\nLiquidation: allows liquidation of positions if the …\nLong.\nLong position.\nDecrease position at the current market price.\nIncrease position at the current market price.\nSwap token A to token B at the current market price.\nOrder Kind.\nOrder side.\nPosition Cut Kind.\nPosition Kind.\nShort.\nShort position.\nStop-Loss Decrease.\nUninitialized.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs decrease position order.\nIs increase position order.\nReturn whether the side is long.\nIs market order.\nIs market decrease.\nIs swap order.\nGet size delta.\nConvert into <code>OrderKind</code>.\nPrice type.\n<code>U192</code> number 10.\n<code>Uint</code> for <code>192</code> bits.\nConvert to <code>u128</code> storage.\nDecimal type for price.\nFinds the minimum divisor decimals needed to convert a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMax Price.\nMin Price.\nDecimal type for storing prices.\nErrors of decimals.\nInvalid decimals.\nExceed the maximum decimals.\nThe Maximum Decimals. Should satisfy <code>MAX_DECIMALS &lt;= 30</code>.\nThe Maximum Decimal Multiplier, which should satisfy …\nOverflow.\nDecimal multiplier.\nCalculate the decimal multiplier with the desired …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the max representable decimal with the same …\nReturns the price of one unit (with decimals to be …\nCreate price decimal from the given <code>price</code> with <code>decimals</code>, …\nValue.\nThe “default” pubkey.\nParse optional address where the default pubkey is treated …\nConvert to bytes with only the reference of a <code>Pubkey</code>.\nConfig Keeper.\nFeature Keeper.\nGT Controller.\nMarket Keeper.\nMax length of the role anme.\nMigration Keeper.\nOracle Controller.\nOrder Keeper.\nPrice Keeper.\nRestart Admin. When the cluster restarts, this role can be …\nThe key of a Role.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHas swap parameters.\nInvalid swap path.\nMax total number of tokens of swap path.\nMax total length of swap paths.\nSwap params.\nSwap Parameter error.\nGet the first market token in the swap path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over both swap paths, primary path first then …\nGet the last market token in the swap path.\nGet the number of tokens.\nThe number of tokens.\nPadding.\nSwap paths.\nGet the length of primary swap path.\nThe length of primary swap path.\nGet primary swap path.\nGet the length of secondary swap path.\nThe length of secondary swap path.\nGet secondary swap path.\nGet the swap params.\nConvert to tokens with feed.\nConvert to token records.\nGet all tokens for the action.\nTokens.\nGet unique market tokens excluding current market token.\nGet validated primary swap path.\nGet validated secondary swap path.\nAllow deposit.\nAllow withdrawal.\nDefault heartbeat duration for price updates.\nDefault precision for price.\nDefault timestamp adjustment.\nEnabled.\nExceed max length limit.\nPrice Feed Config.\nFixed str error.\nIs initialized.\nInvalid provider index.\nMax number of treasury token flags.\nNot found.\nIs a synthetic asset.\nToken config error.\nToken Flags.\nFlags container generated by the macro.\nToken Flags.\nAn iterator over the variants of TokenFlag\nRead Token Map.\nA record of token config.\nTokens Collector.\nTokens with feed.\nGet expected price provider kind.\nExpected provider.\nExpected price provider.\nGet feed.\nPrice Feeds.\nFeeds.\nToken feeds for the tokens, which must be of the same …\nGet flag.\nFlags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>TokenRecord</code> from token config, using the …\nCreate from value.\nGet the config of the given token.\nGet price feed address for the expected provider.\nGet the corresponding price feed address.\nGet the corresponding price feed config.\nGet flag.\nHeartbeat duration.\nHeartbeat duration.\nHeartbeat duration.\nInsert a new token.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nConvert to a vec.\nIs enabled.\nIs synthetic.\nReturns whether the config is a valid pool token config.\nGet token name.\nName.\nCreate a new <code>TokensCollector</code>.\nCreate a new feed config.\nCreate a new <code>TokenRecord</code>\nThe numbers of tokens of each provider.\nPrice Precision.\nPrecision.\nPrice precision.\nProviders set, which must be of the same length with <code>nums</code>.\nSet enabled.\nSet expected provider.\nSet feed config.\nSet flag.\nSet flag\nSet synthetic.\nSort tokens by provider. This sort is stable.\nGet timestamp adjustment.\nGet timestamp adjustment.\nTimestamp adjustments.\nConvert to <code>TokensWithFeed</code>.\nGet token configs for the given market.\nToken decimals.\nToken decimals.\nCollect token records for the give tokens.\nTokens that require prices, which must be of the same …\nCreate from token records.\nUpdate the feed address for the given price provider. …\nSet expected provider.\nSet heartbeat duration.\nSet precision.\nChange the timestamp adjustment.")