searchState.loadedDescShard("gmsol_store", 1, "Shift.\nStop-loss Decrease Order.\nUpdate.\nWithdrawal.\nClear.\nDisplay feature.\nEntries.\nEntries with mutable access.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet.\nGet entry by index.\nGet mutable reference to the corresponding value.\nInsert.\nInsert with options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs empty.\nGet length.\nRemove.\nGLV token seed.\nGlv.\nGlv Deposit.\nGLV Deposit Params.\nToken and accounts.\nMarket Config for GLV.\nGLV Market Config Flag.\nFlags container generated by the macro.\nFixed size map generated by the macro.\nGlv Shift.\nGlv Withdrawal.\nGLV Withdrawal Params.\nToken and accounts.\nIs deposit allowed.\nMax allowed number of markets.\nGLV Update Params.\nGet balance.\nClear.\nReturn whether the given market token is contained in this …\nEntries.\nEntries with mutable access.\nGet final long token.\nGet final long token account.\nGet final short token.\nGet final short token account.\nFind GLV address.\nFind GLV token address.\nGet first deposit receiver.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nGet the funder.\nGet.\nGet entry by index.\nGet flag.\nGet flag.\nGet mutable reference to the corresponding value.\nGet the GLV address.\nGet the GLV token address.\nGet GLV token.\nGet GLV token.\nGet GLV token account.\nGet GLV token account.\nGet the index of the glv token.\nInitial long token and account.\nInitial short token and account.\nInsert.\nInsert with options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nIs empty.\nReturns whether the update is empty.\nGet length.\nGet the long token address.\nGet <code>GlvMarketConfig</code> for the given market.\nGet market token.\nGet market token.\nGet market token account.\nGet market token account.\nGet all market tokens.\nGet max amount.\nGet max value.\nThe minimum acceptable amount of final long tokens to …\nThe minimum acceptable amount of final short tokens to …\nGet min tokens for first deposit.\nMinimum amount for the first GLV deposit.\nGet the total number of markets.\nRemove.\nSet flag.\nGet last shift executed ts.\nGet max shift price impact factor.\nMaximum price impact factor after shift.\nGet min shift interval.\nMinimum shift interval seconds.\nGet min shift vaule.\nMinimum shift value.\nGet the short token address.\nGet the store address.\nStore.\nGet swap params.\nGet token infos.\nGet tokens.\nGet token infos.\nCreate a new <code>TokensCollector</code>.\nGet the version of the <code>Glv</code> account format.\nConfirmed.\nGT Exchange Account.\nGT Exchange Vault Flags.\nFlags container generated by the macro.\nGT Exchange Vault.\nGT Exchange Vault Flags.\nFlags container generated by the macro.\nInitialized.\nInitialized.\nGet amount.\nGet amount.\nBump seed.\nBump.\nGet GT decimals.\nGet time window for GT exchange.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nCreate from value.\nGet flag.\nGet flag.\nGet time window index.\nGet grow steps.\nGet GT vault.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nConvert into value.\nGet whether the vault is comfirmed.\nReturns whether the GT state is initialized.\nGet whether the vault is initialized.\nGet whether the vault is initialized.\nGet minting cost.\nGet the owner address.\nOwner address.\nSet exchange time window.\nSet flag.\nSet flag.\nStore.\nStore address.\nGet GT supply.\nGet time window.\nGet current time window index.\nGet time window as <code>u32</code>.\nGet total minted.\nValidate that this vault is confirmable.\nValidate that this vault is depositable.\nGet vault.\nVault address.\nAs a liquidity market.\nIs auto-deleveraging enabled for long.\nIs auto-deleveraging enabled for short.\nMarket clocks.\nIs enabled.\nIs GT minting enabled.\nType that has market meta.\nMarket indexer.\nMax number of flags.\nMarket.\nMarket Flags.\nFlags container generated by the macro.\nMarket Metadata.\nMarket State.\nIs Pure.\nAs a liquidity market.\nClock ops.\nGet clock of the given kind.\nMarket Config.\nGet current deposit count.\nDescription.\nFind PDA for <code>Market</code> account.\nGet flag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nGet funding factor per second.\nGet config.\nGet config by key.\nGet config flag.\nGet config flag by key.\nGet config mutably.\nGet flag.\nGet current GLV deposit count.\nGet current GLV withdrawal count.\nIndex token.\nGet market indexer.\nGet market indexer mutably.\nInitialize the market.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nIs ADL enabled.\nIs this market enabled.\nIs GT Minting enabled.\nIs this market a pure market, i.e., a single token market.\nGet long token balance.\nLong token.\nMarket token.\nGet max pool value for deposit.\nGet meta.\nGet name.\nCreate a new <code>AsLiquidityMarket</code>.\nNext deposit id.\nNext GLV deposit id.\nNext GLV withdrawal id.\nNext order id.\nNext shift id.\nNext trade id.\nNext withdrawal id.\nGet current order count.\nPool.\nGet pool of the given kind.\nGet prices from oracle.\nRevertible Market Operations.\nSet ADL enabled.\nSet config flag.\nSet enabled.\nSet flag.\nSet flag.\nSet whether the GT minting is enabled.\nGet current shift count.\nGet short token balance.\nShort token.\nGet other market state.\nMarket Status.\nStore.\nGet current trade count.\nTry to get pool of the given kind.\nUpdate config with buffer.\nMarket Utils.\nValidate the market.\nValidate that this market is shiftable to the target …\nGet validated meta.\nGet current withdrawal count.\nClock-related operations.\nClock-related operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJust passed in seconds.\nPassed in seconds.\nBorrowing fee above optimal usage factor for long.\nBorrowing fee above optimal usage factor for short.\nBorrowing fee base factor for long.\nBorrowing fee base factor for short.\nBorrowing fee exponent for long.\nBorrowing fee exponent for short.\nBorrowing fee factor for long.\nBorrowing fee factor for short.\nBorrowing fee optimal usage factor for long.\nBorrowing fee optimal usage factor for short.\nBorrowing fee receiver factor.\nAn entry of the config buffer.\nAn entry of the config buffer.\nFunding fee decrease factor per second.\nFunding fee exponent.\nFunding fee factor.\nFunding fee increase factor per second.\nFunding fee max factor per second.\nFunding fee min factor per second.\nFunding fee threshold for decrease funding.\nFunding fee threshold for stable funding.\nIgnore open interest for usage factor.\nLiquidation fee factor.\nLiquidation fee receiver factor.\nMax number of config flags.\nMarket Config.\nMarket Config Buffer.\nMarket Config Flags.\nFlags container generated by the macro.\nMarket config keys.\nMax negative position impact factor.\nMax open interest for long.\nMax open interest for short.\nMax PNL factor for long ADL.\nMax PNL factor for long deposit.\nMax PNL factor for long trader.\nMax PNL factor for long withdrawal.\nMax PNL factor for short ADL.\nMax PNL factor for short deposit.\nMax PNL factor for short trader.\nMax PNL factor for short withdrawal.\nMax pool amount for long token.\nMax pool amount for short token.\nMax pool value for deposit for long token.\nMax pool value for deposit for short token.\nMax position impact factor for liquidations.\nMax positive position impact factor.\nMin collateral factor.\nMin collateral factor for open interest multiplier for …\nMin collateral factor for open interest multiplier for …\nMin collateral value.\nMin PNL factor after long ADL.\nMin PNL factor after short ADL.\nMin position impact pool amount.\nMin position size usd.\nMin tokens for first deposit.\nOpen interest reserve factor.\nOrder fee factor for negative impact.\nOrder fee factor for positive impact.\nOrder fee receiver factor.\nPosition impact distribute factor.\nPosition impact exponent.\nPosition impact negative factor.\nPosition impact positive factor.\nReserve factor.\nSkip borrowing fee for smaller side.\nSwap fee factor for negative impact.\nSwap fee factor for positive impact.\nSwap fee receiver factor.\nSwap impact exponent.\nSwap impact negative factor.\nSwap impact positive factor.\nAuthority.\nExpiration time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nGet flag.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nReturn whether the buffer is empty.\nCreate an iterator of entries.\nGet key.\nKey.\nReturn the number of entries.\nSet flag.\nStore.\nGet value.\nValue.\nA pool for market.\nA pool storage for market.\nMarket Pools.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the long token amount.\nGet pool.\nGet the short token amount.\nRevertible type.\nType that has a revision.\nCommit the changes.\nRevertible Liquidity Market.\nRevertible Market.\nGet the revision.\nRevertible Position.\nRevertible Swap Market.\nConvert a <code>RevertibleMarket</code> to a <code>LiquidityMarketMut</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeposit.\nRevertible Market.\nShift.\nSwap.\nSwap Pricing Kind.\nWithdrawal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRevertible Position.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA map of markets used for swaps where the key is the …\nCommit the swap.\nReturns the argument unchanged.\nGet market.\nGet market mutably.\nCalls <code>U::from(self)</code>.\nMarket Status.\nBorrowing factor per second for long.\nBorrowing factor per second for short.\nReturns the argument unchanged.\nCreate from market and prices.\nFunding factor per second.\nCalls <code>U::from(self)</code>.\nPending pnl for long.\nPending pnl for short.\nPool value without pnl for long.\nPool avlue without pnl for short.\nReserve value for long.\nReserve value for short.\nTrait for defining operations related to auto-deleveraging.\nExtension trait for validating market balances.\nLatest ADL time.\nValidate if the ADL can be executed.\nValidate market balance for the given token.\nValidate market balances.\nValidate market balances excluding the given token amounts.\nChainlink Data Feed.\nChainlink Data Streams.\nOracle Account.\nFlags container generated by the macro.\nCustom Price Feed.\nPrice structure for Price Feed.\nSupported Price Provider Kind.\nPyth Oracle V2.\nSwitchboard On-Demand (V3) Data Feed.\nAuthority.\nChainlink.\nGet feed id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from chainlink price report.\nCreate from value.\nGet flag.\nGet primary price for the given token.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nReturn whether the oracle is cleared.\nIs market open.\nGet published slot.\nGet max oracle ts.\nGet max price.\nGet min oracle slot.\nGet min oracle ts.\nGet min price.\nGet price feed price.\nGet price.\nPrice Map.\nGet provider.\nPyth.\nSet flag.\nStore.\nSwitchboard.\nOracle time validation.\nTry converting to <code>Price</code>.\nGet ts.\nPrice Validator.\nThe Chainlink Program.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMax tokens.\nFixed size map generated by the macro.\nZero-copy price structure for storing min max prices.\nClear.\nEntries.\nEntries with mutable access.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet.\nGet entry by index.\nGet mutable reference to the corresponding value.\nInsert.\nInsert with options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs empty.\nReturns whether the token is synthetic.\nGet length.\nGet max price.\nGet min price.\nRemove.\nConvert to <code>Price</code>.\nPush Oracle ID.\nThe Pyth receiver program.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert pyth price value with confidence to <code>Price</code>.\nThe Switchboard receiver program.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValidate Oracle Time.\nExtension trait for <code>ValidateOracleTime</code>.\nOracle must be updated after this time.\nOracle must be updated after this slot.\nOracle must be updated before this time.\nValidate max oracle ts.\nValidate min oracle updated slot.\nValidate min oracle ts.\nDefault timestamp adjustment.\nPrice Validator.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAuto-deleveraging Order.\nRecevier Kind.\nLimit Decrease.\nLimit Increase.\nLimit Swap.\nLiquidation: allows liquidation of positions if the …\nLong.\nDecrease position at the current market price.\nIncrease position at the current market price.\nSwap token A to token B at the current market price.\nOrder.\nOrder params.\nOrder Kind.\nOrder side.\nToken accounts for Order.\nShort.\nStop-Loss Decrease.\nTransfer Out.\nUpdate Order Params.\nGet accetable price (unit price).\nAcceptable price.\nGet initial collateral delta amount.\nGet decrease position swap type.\nReturn whether the order is executed.\nGet final output token info.\nFinal output token.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet initial collateral token info.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs decrease position order.\nIs empty.\nIs increase position order.\nReturn whether the side is long.\nIs market order.\nIs market decrease.\nIs swap order.\nReturn whether the order is updatable.\nReturn whether the output for user is empty.\nGet order kind.\nGet long token info.\nLong token.\nLong token amount for claimable account of holding.\nLong token amount for claimable account of user.\nGet market token.\nGet min output.\nMin output amount.\nGet order params.\nGet position address.\nGet secondary output token (pnl token).\nSecondary output token.\nGet short token info.\nShort token.\nShort token amount for claimable account of holding.\nShort token amount for cliamable account of user.\nGet order side.\nGet signer.\nGet size delta in value.\nSize delta in USD.\nGet swap params.\nGet token accounts.\nGet trigger price (unit price).\nTrigger price.\nGet valid from ts.\nValid from this timestamp.\nValidate output amount.\nValidate trigger price.\nValidate that current timestamp &gt;= <code>valid_from_ts</code>.\nA helper type that implements the <code>Position</code> trait.\nLong position.\nPosition.\nPosition Kind.\nPosition State.\nShort position.\nUninitialized.\nConvert to a type that implements <code>Position</code>.\nBorrowing factor.\nBump seed.\nCollateral amount.\nCollateral token.\nThe time that the position last decreased at.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunding fee amount per size.\nThe time that the position last increased at.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet <strong>initialized</strong> position kind.\nPosition kind (the representation of <code>PositionKind</code>).\nGet position kind.\nLong token claimable funding amount per size.\nThe market token of the position market.\nOwner.\nPadding.\nShort token claimable funding amount per size.\nSize in tokens.\nSize in usd.\nPosition State.\nStore.\nTrade id.\nInitialize the position state.\nReturns whether the position side is long.\nCreate from the position and market.\nUpdated at slot.\nConfig Keeper.\nFeature Keeper.\nGT Controller.\nMarket Keeper.\nMax number of members.\nMax number of roles.\nMax length of the role anme.\nMigration Keeper.\nFixed size map generated by the macro.\nOracle Controller.\nOrder Keeper.\nPrice Keeper.\nRestart Admin. When the cluster restarts, this role can be …\nA <code>u8</code> value indicates that this role is enabled.\nThe key of a Role.\nFixed size map generated by the macro.\nRole Metadata.\nRoles Store.\nClear.\nClear.\nDisable this role.\nDisable a role.\nEnable this role.\nEnable a role.\nGet the index of a enabled role.\nEntries.\nEntries.\nEntries with mutable access.\nEntries with mutable access.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet.\nGet.\nGet entry by index.\nGet entry by index.\nGet mutable reference to the corresponding value.\nGet mutable reference to the corresponding value.\nGrant a role to the pubkey.\nCheck if the given role is granted to the pubkey.\nInsert.\nInsert.\nInsert with options.\nInsert with options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs empty.\nIs empty.\nIs enbaled.\nGet length.\nGet length.\nGet all members.\nGet the name of this role.\nCreate a new role metadata.\nGet the number of members.\nGet the number of roles.\nRemove.\nRemove.\nRevoke a role from the pubkey.\nGet the index of a role.\nGet role value for the user.\nGet all roles.\nShift.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet from market token.\nGet from market token account.\nGet from market token amount.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet long token.\nGet min to market token amount.\nGet short token.\nGet to market token.\nGet to market token account.\nGet token infos.\nAddress keys.\nAddresses.\nMax ADL prices staleness (seconds).\nAmount keys.\nAmounts.\nClaimable time window (seconds).\nFactor keys.\nFactors.\nHolding.\nMaximum length of key.\nOracle max age (seconds).\nMax timestamp excess for oracle timestamp (seconds).\nOracle max timestamp range (seconds).\nOracle Ref Price Deviation.\nOrder fee discount for referred user.\nRecent time window (seconds).\nRequest expiration (seconds).\nData Store.\nTreasury.\nWallet Seed.\nStore authority.\nGet claimable time key for the given timestamp.\nGet claimable time window size.\nGet claimable time window index for the given timestamp.\nDisable a role.\nEnable a role.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet address.\nGet address by key.\nGet address mutably\nGet amount.\nGet amount by key.\nGet amount mutably\nGet factor.\nGet factor by key.\nGet factor mutably\nGet feature disabled.\nGrant a role.\nGet GT State.\nCheck if the given authority has the ADMIN role.\nReturns whether the cluster has restarted since last …\nCheck if the roles has the given enabled role. Returns <code>true</code>…\nGet holding address.\nInitialize.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the given pubkey is the authority of the store.\nIs the given feature disabled.\nGet the key of the store.\nGet the next receiver address.\nGet order fee discount factor.\nGet the receiver address.\nCalculate the request expiration time.\nRevoke a role.\nGet the role store.\nGet token map address.\nThe token map to used.\nValidate whether fees can be claimed by this address.\nValidate whether the given features is enabled.\nValidate the cluster has not restarted.\nValidate the cluster has not restarted for mutable …\nDefault heartbeat duration for price updates.\nDefault precision for price.\nDefault timestamp adjustment.\nPrice Feed Config.\nRead Token Map.\nToken Map Operations.\nHeader of <code>TokenMap</code>.\nToken Map Loader.\nMutable Reference to Token Map.\nReference to Token Map.\nFixed size map generated by the macro.\nClear.\nEntries.\nEntries with mutable access.\nGet expected price provider kind.\nExpected provider.\nExpected price provider.\nGet feed.\nPrice Feeds.\nFeeds.\nGet flag.\nFlags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the config of the given token.\nGet.\nGet entry by index.\nGet price feed address for the expected provider.\nGet the corresponding price feed address.\nGet the corresponding price feed config.\nGet mutably the config of the given token.\nGet mutable reference to the corresponding value.\nHeartbeat duration.\nHeartbeat duration.\nHeartbeat duration.\nInsert.\nInsert with options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs empty.\nWhether this token map is empty.\nIs enabled.\nIs synthetic.\nReturns whether the config is a valid pool token config.\nGet length.\nGet the number of tokens.\nLoad token map.\nLoad token map with mutable access.\nGet token name.\nName.\nCreate a new feed config.\nPrice Precision.\nPrecision.\nPrice precision.\nPush a new token config.\nRemove.\nSet enabled.\nSet expected provider.\nSet feed config.\nSet flag\nSet synthetic.\nSort tokens by provider. This sort is stable.\nGet the space of the whole <code>TokenMap</code> required, excluding …\nGet the space after push.\nThe authorized store.\nGet timestamp adjustment.\nGet timestamp adjustment.\nTimestamp adjustments.\nGet token configs for the given market.\nToken decimals.\nToken decimals.\nGet tokens.\nUpdate the feed address for the given price provider. …\nUtils for using token map.\nSet expected provider.\nSet heartbeat duration.\nSet precision.\nChange the timestamp adjustment.\nToken Map.\nReturns the argument unchanged.\nGet the header.\nCalls <code>U::from(self)</code>.\nIs empty.\nCreate an iterator over the entires of the map.\nGet the number of tokens in the map.\nGet all tokens.\nIs initialized.\nThe length of referral code.\nMax flags.\nReferral.\nReferral Code Bytes.\nReferral Code.\nUser flags.\nFlags container generated by the macro.\nGT State.\nHeader of <code>User</code> Account.\nGet GT balance.\nGet the referral code account address.\nCode bytes.\nDecode the given code string to code bytes.\nEncode the given code to code string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nGet flag.\nGet GT state.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nReturn whether the user account is initialized.\nGet minted fee value.\nGet next owner.\nOwner.\nGet total paid fee value.\nGet current rank.\nGet referral.\nGet the user account address of the referrer.\nSet flag.\nGet User Account space.\nStore.\nWithdrawal.\nWithdrawal params.\nToken Accounts.\nGet final_long token.\nGet final_long token account.\nGet final_short token.\nGet final_short token account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet market token.\nGet market token account.\nMarket token amount to burn.\nThe minimum acceptable amount of final long tokens to …\nThe minimum acceptable amount of final short tokens to …\nGet the swap params.\nGet tokens and accounts.\nProvides access control utils for <code>CpiAuthentication</code>s.\nAccounts that can be used for authentication.\nAccounts that with oracle context.\nExtension trait for <code>WithOracle</code>.\nWith Store.\nGet the authority to check.\nGet the chainlink program.\nGet the cpi context for checking role or admin permission.\nGet the cpi context for checking role or admin permission.\nChunk by.\nGet the CPI context for clear all prices.\nGet the CPI context for clear all prices.\nGet controller account.\nUtils for deserializing “zero-copy” account.\nDynamic Access.\nFixed-size string.\nLogging utils.\nCallback on authentication error.\nCheck that the <code>authority</code> has the given <code>role</code>.\nCheck that the <code>authority</code> has the given <code>role</code>.\nCheck that the <code>authority</code> is an admin.\nCheck that the <code>authority</code> is an admin.\nCheck that the <code>authority</code> has the <code>MARKET_KEEPER</code> role.\nCheck that the <code>authority</code> has the <code>MARKET_KEEPER</code> role.\nCheck that the <code>authority</code> has the <code>ORDER_KEEPER</code> role.\nCheck that the <code>authority</code> has the <code>ORDER_KEEPER</code> role.\nGet the oracle account.\nPubkey utils.\nGet the CPI context for set prices.\nGet the CPI context for set prices.\nGet data store.\nGet data store program.\nToken utils.\nGet the token map account.\nRun the given function inside the scope with oracle prices.\nRun the given function inside the scope with oracle prices.\nIterator returns by <code>chunk_by</code>.\nA <code>slice::chunk_by</code> implementation, copied from <code>std</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck discriminator.\nA workaround to deserialize “zero-copy” account data.\nA workaround to deserialize “zero-copy” account data.\nGet at index.\nGet mutablely at index.\nBytes to fixed size string.\nFixed size string to bytes.\nThe “default” pubkey.\nParse optional address where the default pubkey is treated …\nConvert to bytes with only the reference of a <code>Pubkey</code>.\nCreate a builder for building <code>TransferAllFromEscrowToATA</code>. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if the given <code>pubkey</code> is an ATA address.\nCheck if the given <code>pubkey</code> is an ATA address or the <code>owner</code> …\nCheck if the given address is an ATA address.\nReturn whether the token account must be uninitialized.\nValidate associated token account.\nValidate token account.")