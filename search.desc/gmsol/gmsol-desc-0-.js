searchState.loadedDescShard("gmsol", 0, "Contains the error value\nContains the success value\nAddress Lookup Table operations.\nChainlink integartion.\nCLI support.\nGMSOL Client.\nGMSOL constants.\nError type for <code>gmsol</code>.\nInstructions for the exchange funtionality.\nIDL operations.\nProgram Derived Addresses for GMSOL Programs.\nProgram IDs.\nPyth intergration.\nInstructions for the store program.\nSwitchboard integration.\nInstructions for the timelock program.\nInstructions for the treasury program.\nGMSOL types.\nUtils.\nAddress Lookup Table operations.\nFetch address lookup table.\nFetch address lookup table with the given config.\nCreate a <code>TransactionBuilder</code> to close the given address …\nCreate a <code>TransactionBuilder</code> to create address lookup table.\nCreate a <code>TransactionBuilder</code> to deactivate the given …\nCreate a <code>BundleBuilder</code> to extend the given address lookup …\nChainlink Pull Oracle (Data Streams).\nClient.\nParse Feed ID.\nPull Oracle.\nRaw Report.\nRaw Report Data.\nA bulk of reports.\nChainlink Data Streams Client.\nCredential.\nDefault base URL for Chainlink Streams.\nDefault base URL for Chainlink Streams.\nENV for Secret.\nENV for User ID.\nFeed.\nFeeds.\nTestnet base URL for Chainlink Streams.\nTestnet base URL for Chainlink Streams.\nGet bulk of reports with the given feed IDs and timestamp.\nDecode the report.\nFeed ID.\nHex-encoded Feed ID.\nFeed ID.\nGet available feeds.\nFeeds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from Default ENVs.\nCreate a new <code>Client</code> with default base url and default ENVs.\nCreate a new <code>Client</code> with testnest base url and default …\nFull Report.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto report data.\nInto reports.\nGet latest report of the given hex-encoded feed ID.\nObservations timestamp (in secs).\nDecode report to bytes.\nSubscribe to report updates using websocket.\nCreate a new <code>Client</code> with the given base URL.\nValid From Timestamp (in secs).\nCreate a new mainnet <code>Client</code> with the given credential.\nCreate a new testnet <code>Client</code> with the given credential.\nChainlink Pull Oracle.\nChainlink Pull Oracle Factory.\nWrap in an <code>Arc</code>.\nFilter feed ids.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate <code>ChainlinkPullOracle</code>.\nCreate a new <code>ChainlinkPullOracleFactory</code> with default …\nCreate a new <code>ChainlinkPullOracle</code> with default program ID …\nPrepare feed accounts for the given tokens and feed_ids.\nPrepare feed accounts but do not send.\nPrepare feed accounts but do not send.\nCreate a new <code>ChainlinkPullOracleFactory</code> with the given …\nWallet utils.\nLoad keypair.\nLoad signer from url.\nGMSOL Client.\nOptions for <code>Client</code>.\nStore Filter.\nSystem Program Ops.\nFetch account at the given address.\nFetch account at the given address with config.\nGet anchor client.\nFetch the authorized token map of the given store.\nFetch the <code>TokenMap</code> address of the given store.\nCreate a builder for building <code>ClientOptions</code>. On the …\nCreate a <code>BundleBuilder</code>\nCreate a bundle builder with the given options.\nGet the cluster.\nGet the commitment config.\nWait for an order to be completed using current slot as …\nWait for an order to be completed with the given config.\nCreate first deposit.\nCreate first GLV deposit.\nFetch <code>Depsoit</code> account with its address.\nFind claimable account address.\nFind PDA for deposit account.\nFind executor address.\nFind the wallet address of the given executor.\nFind first deposit owner address.\nFind GLV address.\nFind GLV deposit address.\nFind GLV token address.\nFind GLV withdrawal address.\nFind GT bank address.\nFind GT exchange address.\nFind GT exchange vault address.\nFind PDA for market account.\nFind PDA for market token mint account.\nFind PDA for market vault account.\nFind PDA for order.\nFind PDA for position.\nFind Custom Price Feed address.\nFind referral code address.\nFind PDA for shift.\nFind PDA for <code>Store</code> account.\nFind PDA for store wallet account.\nFind timelock config address.\nFind trade event buffer address.\nFind treasury global config address.\nFind treasury receiver address.\nFind treasury vault config address.\nFind User account address.\nFind DPA for withdrawal account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet slot.\nFetch all <code>Glv</code> accounts of the given store.\nFetch all <code>Glv</code> accounts of the given store.\nGet GT exchanges.\nFetch historical <code>StoreCPIEvent</code>s for the given account.\nIgnore disc offset.\nFetch <code>InstructionBuffer</code> account with its address.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet last order events.\nFetch <code>Market</code> account with its address.\nFetch <code>MarketStatus</code> with the market token address.\nFetch current market token price with the market token …\nFetch <code>Market</code> at the given address with config.\nFetch all <code>Market</code> accounts of the given store.\nFetch all <code>Market</code> accounts of the given store.\nCreate a new <code>Client</code> with default options.\nCreate a new store filter.\nCreate a new store program.\nCreate a new treasury program.\nCreate a new <code>Client</code> with the given options.\nFetch <code>Order</code> account with its address.\nFetch <code>Order</code> account at the the given address with config.\nFetch all <code>Order</code> accounts of the given owner of the given …\nGet the payer.\nFetch <code>Position</code> account with its address.\nFetch all <code>Position</code> accounts of the given owner of the …\nFetch <code>PriceFeed</code> account with its address.\nCreate a new <code>Program</code> with the given program id.\nGet the <code>PubsubClient</code>.\nGet RPC Client.\nReplace the subscription config.\nShutdown the client gracefully.\nFetch <code>Store</code> account with its address.\nFetch accounts owned by the Store Program.\nFetch accounts owned by the Store Program.\nGet the event authority address for the <code>Store</code> program.\nStore offset.\nGet the store program.\nGet the program id of the store program.\nCreate a transaction builder for the store program.\nSubscribe to <code>StoreCPIEvent</code>s from the store program.\nGet the timelock program.\nGet the program id of the timelock program.\nCreate a transaction builder for the timelock program.\nFetch <code>TokenMap</code> account with its address.\nTransfer to.\nGet the treasury program.\nGet the program id of the treasury program.\nCreate a transaction builder for the treasury program.\nTry to clone the client.\nTry to clone a new client with a new payer.\nFetch user account with its address.\nFetch <code>Withdrawal</code> account with its address.\nClaimable Account Seed.\nDefault max ADL prices staleness (in seconds).\nDefault borrowing fee above optimal usage factor for long.\nDefault borrowing fee above optimal usage factor for short.\nDefault borrowing fee base factor for long.\nDefault borrowing fee base factor for short.\nDefault borrowing fee exponent for long.\nDefault borrowing fee exponent for short.\nDefault borrowing fee factor for long.\nDefault borrowing fee factor for short.\nDefault borrowing fee optimal usage factor for long.\nDefault borrowing fee optimal usage factor for short.\nDefault claimable time window.\nDefault funding fee decrease factor per second.\nDefault funding fee exponent.\nDefault funding factor.\nDefault funding fee increase factor per second.\nDefault funding fee max factor per second.\nDefault funding fee min factor per second.\nDefault funding fee threshold for decrease funding.\nDefault funding fee threshold for stable funding.\nDefault GLV max shift price impact factor.\nDefault GLV min shift interval seconds.\nDefault GLV min shift value.\nDefault GT vault time window size.\nDefault ignore open interest for usage factor.\nDefault liquidation fee factor.\nDefault max negative position impact factor.\nDefault max open interest for long.\nDefault max open interest for short.\nDefault max pnl factor for long adl.\nDefault max pnl factor for long deposit.\nDefault max pnl factor for long trader.\nDefault max pnl factor for long withdrawal.\nDefault max pnl factor for short adl.\nDefault max pnl factor for short deposit.\nDefault max pnl factor for short trader.\nDefault max pnl factor for short withdrawal.\nDefault max pool amount for long token.\nDefault max pool amount for short token.\nDefault max pool value for deposit for long token.\nDefault max pool value for deposit for short token.\nDefault max position impact factor for liquidations.\nDefault max positive position impact factor.\nDefault min collateral factor.\nDefault min collateral factor for open interest for long\nDefault min collateral factor for open interest for short\nDefault min collateral value.\nDefault min pnl factor after long adl.\nDefault min pnl factor after short adl.\nDefault min position impact pool amount.\nDefault min position size usd.\nDefault min tokens for first deposit.\nDefault open interest reserve factor.\nDefault oracle max age.\nDefault oracle max future timestamp excess (in seconds).\nDefault oracle max timestamp range.\nDefault oracle ref price deviation.\nDefault order fee factor for negative impact.\nDefault order fee factor for positive impact.\nDefault position impact distribute factor.\nDefault position impact exponent.\nDefault position impact negative factor.\nDefault position impact positive factor.\nDefault receiver factor.\nDefault recent time window.\nDefault request expiration.\nDefault reserve factor.\nDefault skip borrowing fee for smaller side.\nDefault swap fee factor for negative impact.\nDefault swap fee factor for positive impact.\nDefault swap impact exponent.\nDefault swap impact negative factor.\nDefault swap impact positive factor.\nEscrow Account Seed.\nEvent authority SEED.\nAdjustment factor for saving funding amount per size.\nGT Mint Seed.\nMarket Token Mint Address Seed.\nDecimals of usd values of factors.\nDecimals of a market token.\nUSD value to amount divisor.\nUnit USD value i.e. <code>one</code>.\nMarket Vault Seed.\nDefault GLV configs.\nDefault market configs.\nDefault GLV max shift price impact factor.\nDefault GLV min shift interval seconds.\nDefault GLV min shift value.\nDefault borrowing fee above optimal usage factor for long.\nDefault borrowing fee above optimal usage factor for short.\nDefault borrowing fee base factor for long.\nDefault borrowing fee base factor for short.\nDefault borrowing fee exponent for long.\nDefault borrowing fee exponent for short.\nDefault borrowing fee factor for long.\nDefault borrowing fee factor for short.\nDefault borrowing fee optimal usage factor for long.\nDefault borrowing fee optimal usage factor for short.\nDefault funding fee decrease factor per second.\nDefault funding fee exponent.\nDefault funding factor.\nDefault funding fee increase factor per second.\nDefault funding fee max factor per second.\nDefault funding fee min factor per second.\nDefault funding fee threshold for decrease funding.\nDefault funding fee threshold for stable funding.\nDefault ignore open interest for usage factor.\nDefault liquidation fee factor.\nDefault max negative position impact factor.\nDefault max open interest for long.\nDefault max open interest for short.\nDefault max pnl factor for long adl.\nDefault max pnl factor for long deposit.\nDefault max pnl factor for long trader.\nDefault max pnl factor for long withdrawal.\nDefault max pnl factor for short adl.\nDefault max pnl factor for short deposit.\nDefault max pnl factor for short trader.\nDefault max pnl factor for short withdrawal.\nDefault max pool amount for long token.\nDefault max pool amount for short token.\nDefault max pool value for deposit for long token.\nDefault max pool value for deposit for short token.\nDefault max position impact factor for liquidations.\nDefault max positive position impact factor.\nDefault min collateral factor.\nDefault min collateral factor for open interest for long\nDefault min collateral factor for open interest for short\nDefault min collateral value.\nDefault min pnl factor after long adl.\nDefault min pnl factor after short adl.\nDefault min position impact pool amount.\nDefault min position size usd.\nDefault min tokens for first deposit.\nDefault open interest reserve factor.\nDefault order fee factor for negative impact.\nDefault order fee factor for positive impact.\nDefault position impact distribute factor.\nDefault position impact exponent.\nDefault position impact negative factor.\nDefault position impact positive factor.\nDefault receiver factor.\nDefault reserve factor.\nDefault skip borrowing fee for smaller side.\nDefault swap fee factor for negative impact.\nDefault swap fee factor for positive impact.\nDefault swap impact exponent.\nDefault swap impact negative factor.\nDefault swap impact positive factor.\nAccount.\nADL is not enabled.\nADL is not required.\nAnchor Error.\nAnchor Error with owned source.\nBase64 Decode Error.\nBytemuck error.\nChainlink Program is required.\nClaimable collateral for holding cannot be in output …\nClient Error.\nComplie Solana Message Error.\nDecode error.\nDisabled market.\nEmpty deposit.\nEmpty Deposit.\nEmpty GLV withdrawal.\nEmpty Order.\nEmpty Shift.\nEmpty Withdrawal.\nError type for <code>gmsol</code>.\nError origin with owned source.\nEvent buffer is not provided.\nExceed max market token balance amount of GLV.\nExceed max market token balance value of GLV.\nExceed max length limit.\nEyre errors.\nFailed to calculate market token amount to burn.\nFailed to calculate GLV amount to mint.\nFailed to calculate GLV value for market.\nFeature disabled.\nFormat error.\nGT State has been initialized.\nDeposit is not allowed with the given market.\nNegative Market Pool Value.\nShift interval not yet passed.\nShift max price impact exceeded.\nShift value too small.\nInsufficient output amounts.\nInternal error.\nInvalid ADL.\nInvalid Arguments.\nInvalid Argument.\nInvalid Borrowing Factor.\nInvalid collateral token.\nInvalid funding factors.\nInvalid GT config.\nInvalid GT discount.\nInvalid market config key.\nInvalid min output amount for limit swap.\nInvalid Oracle slot.\nInvalid Oracle timestamps range.\nInvalid position.\nInvalid position kind.\nInvalid price feed account.\nInvalid Price feed price.\nInvalid Price Report.\nInvalid Provider Kind Index.\nInvalid owner for the first deposit.\nInvalid Shift Markets\nInvalid Store Config Key.\nInvalid Swap Path.\nInvalid Swap Path length.\nInvalid Trade delta size.\nInvalid Trade delta tokens.\nInvalid Trade ID.\nInvalid trigger price.\nInvalid User Account.\nIO Error.\nJSON error.\nLagged.\nLoad account error.\nMarket account is not provided.\nMarket mismatched.\nMarket not opened.\nMarket token account mismatched.\nMarket token mint mismatched.\nMax oracle timestamps range exceeded.\nMax price age exceeded.\nMax prcie’s timestamp exceeded.\nMint account not provided.\nMissing final output token.\nMissing initial collateral token.\nMissing oracle price.\nMissing pool tokens.\nMissing return data.\nModel error.\nModel Error.\nMutual-referral is not allowed.\nNegative price.\nNo delegated authority is set.\nNon-defualt store is not allowed.\nNot an ATA for the given token.\nNot an Admin.\nNot enough execution fee.\nNot enough GLV token amount for the first deposit.\nNot enough market token amount for the first deposit.\nNot enough space.\nNot enough swap markets in the path.\nNot enough token amounts.\nNot enough token feeds.\nNot found.\nNot found.\nNot supported price provider for custom price feed.\nNumber out of range.\nOracle not updated.\nOracle timestamps are larger than required.\nOracle timestamps are smaller than required.\nOrder kind is not allowed.\nOwner mismatched.\nParse url error.\nPermission denied.\nPosition is required.\nPosition is not required.\nPosition mismatched.\nPreconditions are not met.\nPrice feed is not updated.\nPrice is already set.\nPrice is stale.\nPrice Overflow.\nPrices are already set.\nPubsub client closed.\nReceiver mismatched.\nReferral Code has been set.\nReferral Code Mismatched.\nReferrer has been set.\nRent Receiver mismatched.\nReqwest error.\nThe output token and the secondary output token are the …\nSelf-referral is not allowed.\nSigner Error.\nSolana utils error.\nSource.\nSSE error.\nStore Mismatched.\nStore Outdated.\nSwitchboard Error.\nSynthetic token price is not allowed.\nToken account mismatched.\nToken account is not provided.\nToken amount exceeds limit.\nToken amount overflow.\nToken config is diabled.\nThe decimals of token is immutable.\nToken decimals mismatched.\nToken mint mismatched.\nToken mint is not provided.\nTransport Error.\nUnimplemented.\nUnknown errors.\nUnknown Action State.\nUnknown Decrease Position Swap Type.\nUnknown Order Kind.\nUnknown Order Side.\nUnknown token.\nUser account has been initialized.\nValue overflow.\nAnchor Error Code.\nError code.\nError message.\nError name.\nError origin.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an “invalid argument” error.\nLogs.\nGets the name of this [#enum_name].\nCreate a switchboard error.\nCreate a transport error.\nCreate unknown error.\nExchange instructions.\nAuto-deleverage a position.\nAuto-deleveraging.\nCancel order if the position does not exist.\nClaim fees.\nCancel a deposit.\nClose an order.\nClose shift.\nClose a withdrawal.\nCreate a deposit.\nCreate a new market and return its token mint address.\nCreate an order.\nCreate shift.\nCreate a withdrawal.\nDeposit.\nExecute a deposit.\nExecute an order.\nExecute shift.\nExecute a withdrawal.\nFund the given market.\nCreate a limit decrease order.\nCreate a limit increase order.\nCreate a limit swap order.\nLiquidate a position.\nCreate a market decrease position order.\nCreate a market increase position order.\nCreate a market swap order.\nOrder.\nPosition cut.\nShift.\nCreate a stop-loss decrease order.\nToggle feature.\nTreasury.\nUpdate ADL state.\nUpdate an order.\nWithdrawal.\nThe compute budget for <code>auto_deleverage</code>.\nUpdate ADL state Instruction Builder.\nHint for <code>update_adl_state</code>.\nInsert an Address Lookup Table.\nBuild <code>TransactionBuilder</code> for auto-delevearaging the …\nGet feeds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepare hint for auto-deleveraging.\nClose Deposit Builder.\nClose Deposit Hint.\nCreate Deposit Builder.\n<code>execute_deposit</code> compute budget.\nExecute Deposit Builder.\nHint for executing deposit.\nBuild a <code>TransactionBuilder</code> for <code>cancel_deposit</code> instruction.\nBuild a <code>TransactionBuilder</code> and return deposit address.\nSet whether to close the deposit after execution.\nSet execution fee. Defaults to min execution fee.\nFeeds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet hint.\nSet hint with the given deposit.\nSet hint with the given deposit.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the initial long token params for deposit.\nSet long swap path.\nSet min market token to mint.\nCreate from deposit.\nCreate a new hint for the deposit.\nSet the nonce.\nParse feeds with the given price udpates map.\nPrepare <code>ExecuteDepositHint</code>.\nSet the close reason.\nSet recevier. Defaults to the payer.\nSet the initial short token params for deposit.\nSet short swap path.\nSet whether to unwrap native token. Defaults to should …\nSet token map.\nClose Order Builder.\nClose Order Hint.\nCreate Order Builder.\nCreate Order Hint.\n<code>execute_order</code> compute budget.\nExecute Order Builder.\nHint for executing order.\nOrder Params.\nSet acceptable price.\nAcceptable price (unit price).\nInsert an Address Lookup Table.\nBuild <code>TransactionBuilder</code> for cancelling the order.\nCreate <code>TransactionBuilder</code> and return order address.\nCreate <code>TransactionBuilder</code> and return order address and …\nGet claimable accounts.\nSet whether to close order after execution.\nSet decrease position swap type.\nDecrease Position Swap Type.\nSet event buffer index.\nSet extra exectuion fee allowed to use.\nFeeds.\nSet final output token params (position order only).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSetup hint with the given market meta.\nSet hint with the given order.\nSet hint.\nSet hint with the given order.\nInitial collateral delta amount.\nSet initial collateral token (or swap-in token) params.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the order is for a long or short position.\nOrder kind.\nSet long token account.\nSet min output amount.\nMinimum amount or value for output tokens.\nCreate hint from order and user account.\nSet the nonce.\nPrepare <code>ExecuteOrderHint</code>.\nSet price provider to the given.\nSet reason.\nSet receiver. Defaults to the payer.\nSet recent timestamp with the given.\nSet short token account.\nSet whether to unwrap native token. Defaults to should …\nSize delta usd.\nSet swap path.\nGet position kind.\nSet token map.\nTrigger price (unit price).\nSet valid from ts.\nValid from timestamp.\nThe compute budget for <code>position_cut</code> instruction.\n<code>PositionCut</code> instruction builder.\nHint for <code>PositionCut</code>.\nInsert an Address Lookup Table.\nSet whether to close the order after the execution.\nSet event buffer index.\nGet feeds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from position.\nSet hint with the given position for position cut.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepare hint for position cut.\nSet price provider to the given.\nCreate a new hint.\nClose Shift Builder.\nHint for <code>close_shift</code> instruction.\nCreate Shift Builder.\nHint for creating shift.\nExecute Shift Instruction Builder.\nHint for <code>execute_shift</code> instruction.\nBuild a <code>TransactionBuilder</code> to close shift account.\nBuild a <code>TransactionBuilder</code> to create shift account and …\nSet whether to cancel the shift account on execution error.\nSet whether to close shift account after execution.\nSet exectuion fee allowed to use.\nFeeds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet hint.\nSet hint.\nSet hint.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet min to market token amount.\nCreate hint for <code>close_shift</code> instruction.\nCreate hint for <code>execute_shift</code> instruction.\nSet the nonce.\nPrepare hint if needed\nSet reason.\nSet receiver. Defaults to the payer.\nClaim fees builder.\nBuild.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new builder.\nSet hint.\nClose Withdrawal Builder.\nCreate Withdrawal Builder.\n<code>execute_withdrawal</code> compute budget.\nExecute Withdrawal Builder.\nHint for withdrawal execution.\nBuild a <code>TransactionBuilder</code> for <code>close_withdrawal</code> …\nCreate the <code>TransactionBuilder</code> and return withdrawal …\nSet whether to close the withdrawal after execution.\nSet extra exectuion fee allowed to use.\nFeeds.\nSet final long token params.\nSet final short token params.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet hint.\nSet hint with the given withdrawal.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet long swap path.\nSet market token source account to the given.\nSet min final long token amount.\nSet min final short token amount.\nCreate a new hint for the execution.\nSet the nonce.\nParse feeds with the given price udpates map.\nPrepare <code>ExecuteWithdrawalHint</code>.\nSet price provider to the given.\nSet close reason.\nSet receiver. Defaults to the payer.\nSet short swap path.\nSet whether to unwrap native token. Defaults to should …\nSet token map.\nSet token map.\nIDL operations.\nClose IDL buffer/account.\nCreate IDL account.\nResize buffer/account.\nSet IDL authority.\nSet IDL buffer.\nFind PDA for claimable account.\nDefault store.\nCreate PDA for deposit.\nFind PDA for <code>event_authority</code> account.\nFind executor PDA.\nFind executor wallet PDA.\nFind the PDA for a GLV deposit account.\nFind the PDA for a GLV withdrawal account.\nFind the PDA for a GT bank.\nFind the PDA for GT exchange account.\nFind the PDA for GT exchange vault account.\nFind PDA for Market token mint account.\nFind PDA for the market vault.\nCreate PDA for order.\nCreate PDA for position.\nFint the PDA for custom price feed account.\nFind PDA for referral code account.\nCreate PDA for shift.\nFind PDA for <code>Store</code> account.\nFind PDA for store wallet account.\nFind timelock config PDA.\nFind PDA for trade event buffer.\nFind the PDA for global treasury config.\nFind treasury receiver PDA.\nFind the PDA for a treasury vault config.\nFind PDA for user account.\nCreate PDA for withdrawal.\nConst version of <code>ID</code>\nConvert a pubkey to feed id.\nPyth Pull Oracle.\nPush Oracle.\nExecute with pyth prices.\nPrice updates.\nPrices.\nPyth Pull Oracle.\nPyth Pull Oracle Context.\nPyth Pull Oracle Ops.\nPyth Pull Oracle.\nWith Pyth Prices.\nCreate a new keypair for encoded vaa account.\nBuild RPC requests with price updates.\nGet the oracle context.\nGet encoded vaas.\nEstimate execution fee.\nExecute.\nExecute with options\nExecute with pyth price updates.\nGet feed ids.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from parts.\nHermes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>PythPullOracleContext</code>.\nGet Pyth Program.\nPyth Reciever Ops.\nSend all transactions.\nSet execution fee.\nWhether to estimate the execution fee.\nCreate a new <code>PythPullOracleContext</code> from <code>TokensWithFeed</code>.\nCreate a new <code>PythPullOracle</code> client from <code>Client</code>.\nUtils.\nCreate transactions to post price updates and consume the …\nCreate transactions to post price updates and consume the …\nWormhole Ops.\nGet Wormhole Program.\nBase64.\nDefault base URL for Hermes.\nHermes Client.\nHex.\nThe endpoint of latest price update.\nThe SSE endpoint of price updates stream.\nPrice Update.\nGet the binary price update.\nGet the confidence of the price.\nGet EMA Price.\nGet the exponent of the price.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the feed id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet latest price updates.\nGet metadata.\nMin timestamp.\nGet the parsed price udpate.\nGet previous publish time.\nGet price.\nGet (raw) price.\nGet a stream of price updates.\nGet proof available time.\nGet the publish time (unix timestamp in secs).\nGet slot.\nCreate a new hermes client with the given base URL.\nGet unit prices for the given market.\nConfig account seed.\n<code>post_price_update</code> compute budget.\nPyth Receiver Ops.\n<code>reclaim_rent</code> compute budget.\nTreasury account seed.\nFind PDA for config account.\nFind PDA for treasury account.\nPost price update.\nReclaim rent.\nPrice feed message variant.\nExtract pyth feed ids from <code>TokensWithFeed</code>.\nGet guardian set index from <code>Proof</code>.\nGet merkle price updates.\nGet vaa buffer.\nParse <code>AccumulatorUpdateData</code> from price update.\nParse feed id from <code>MerklePriceUpdate</code>.\nParse price feed message.\n<code>close_encoded_vaa</code> compute budget.\nSeed for guardian set account.\n<code>init_encoded_vaa</code> compute budget.\nThe start offset of the VAA bytes.\n<code>verify_encoded_vaa_v1</code> compute budget.\nWormhole Core Bridge Program Address.\n<code>write_encoded_vaa</code> compute budget.\nWormhole Ops.\nClose encoded vaa account.\nCreate and initialize an encoded vaa account.\nFind PDA for guardian set.\nVerify encoded vaa account.\nWrite to encoded vaa account.\nFind Pyth Feed Account PDA.\nConfig.\nEvents.\nGLV instructions.\nGT instructions.\nMarket and vault management.\nOracle.\nRoles management.\nStore management.\nToken accounts.\nToken Config.\nUser account instructions.\nData store related utils.\nConfig Operations.\nInsert a global address.\nInsert a global address by key.\nInsert a global amount.\nInsert a global amount by key.\nInsert a global factor.\nInsert a global factor by key.\nVariant <code>BorrowingFeesUpdated</code>.\nVariant <code>DepositExecuted</code>.\nVariant <code>DepositRemoved</code>.\nVariant <code>GlvDepositRemoved</code>.\nVariant <code>GlvPricing</code>.\nVariant <code>GlvWithdrawalRemoved</code>.\nVariant <code>GtUpdated</code>.\nVariant <code>MarketFeesUpdated</code>.\nVariant <code>MarketStateUpdated</code>.\nVariant <code>OrderRemoved</code>.\nVariant <code>PositionDecreased</code>.\nVariant <code>PositionIncreased</code>.\nVariant <code>ShiftRemoved</code>.\nA untagged decodable enum <code>GMSOLCPIEvent</code>.\nVariant <code>SwapExecuted</code>.\nVariant <code>TradeEvent</code>.\nVariant <code>UnknownOwnedData</code>.\nVariant <code>WithdrawalExecuted</code>.\nVariant <code>WithdrawalRemoved</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClose GLV deposit builder.\nHint for <code>CloseGlvDepositBuilder</code>.\nClose GLV Shift Builder.\nHint for <code>close_shift</code> instruction.\nClose GLV withdrawal builder.\nHint for <code>CloseGlvWithdrawalBuilder</code>.\nCreate GLV deposit builder.\nHint for <code>CreateGlvDepositBuilder</code>.\nCreate Shift Builder.\nCreate GLV withdrawal builder.\nHint for <code>CreateGlvWithdrawalBuilder</code>\nExecute GLV deposit builder.\nHint for <code>ExecuteGlvDepositBuilder</code>.\nExecute GLV Shift Instruction Builder.\nHint for <code>execute_shift</code> instruction.\nExecute GLV withdrawal builder.\nHint for <code>ExecuteGlvWithdrawalBuilder</code>.\nGlv Operations.\nInsert an Address Lookup Table.\nInsert an Address Lookup Table.\nInsert an Address Lookup Table.\nBuild.\nBuild a <code>TransactionBuilder</code> to close shift account.\nBuild.\nBuild.\nBuild a <code>TransactionBuilder</code> to create shift account and …\nBuild.\nSet whether to cancel the shift account on execution error.\nSet whether to close the GLV deposit after execution.\nSet whether to close shift account after execution.\nSet whether to close the GLV deposit after execution.\nClose a GLV deposit.\nClose a GLV withdrawal.\nCreate a GLV deposit.\nExecute the given GLV deposit.\nExecute the given GLV deposit.\nSet exectuion fee allowed to use.\nFeeds.\nFeeds.\nFeeds.\nFinal long token config.\nFinal short token config.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet GLV token source.\nSet hint.\nSet hint.\nSet hint.\nSet hint.\nSet hint.\nSet hint.\nSet hint.\nSet hint.\nInitialize GLV.\nInsert GLV market.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the initial long token amount and source to deposit …\nSet long swap path.\nSet the market token amount and source to deposit with.\nSet max execution fee allowed to use.\nSet max execution fee allowed to use.\nSet min GLV token amount.\nSet min market token amount.\nSet min to market token amount.\nCreate from market meta.\nCreate from the GLV deposit.\nCreate from the GLV deposit.\nCreate hint for <code>close_shift</code> instruction.\nCreate hint for <code>execute_shift</code> instruction.\nCreate from market meta.\nCreate from the GLV withdrawal.\nCreate a new hint.\nSet the nonce.\nSet the nonce.\nSet the nonce.\nParse feeds with the given price udpates map.\nParse feeds with the given price udpates map.\nParse feeds with the given price udpates map.\nPrepare hint.\nPrepare hint if needed\nPrepare hint.\nPrepare hint.\nPrepare hint.\nSet reason.\nSet reason.\nSet reason.\nSet Receiver. Defaults to the payer.\nSet receiver. Defaults to the payer.\nRemove GLV market.\nSet the initial short tokens and source to deposit with.\nSet short swap path.\nSet whether to unwrap native token. Defaults to should …\nSet whether to unwrap native token. Defaults to should …\nGLV toggle market flag.\nSet token map address.\nSet token map address.\nUpdate GLV config.\nGLV Update Market Config.\nGT Operations.\nClose a confirmed GT exchange.\nConfirm the given GT exchange vault.\nGet current time window index.\nConfigurate the time window size for GT exchange.\nConfigurate GT order fee dicounts.\nConfigurate GT referral rewards\nInitialize GT Mint.\nPrepare GT exchange vault with the given time window.\nInitialize GT exchange vault with the given time window …\nRequest GT exchange with the given time window.\nRequest GT exchange with the given time window index.\nMarket Ops.\nVault Operations.\nClose Market Config Buffer.\nGet market status.\nGet market token price.\nInitialize Market Config Buffer.\nInitialize a market vault for the given token.\nPush to Market Config Buffer.\nSet the authority of the Market Config Buffer.\nToggle GT minting.\nToggle market.\nUpdate market config.\nUpdate market config by key.\nUpdate market config flag\nUpdate market config flag by key.\nUpdate Market Config with the buffer.\nOracle management for GMSOL.\nInitialize <code>Oracle</code> account.\nInitialize Price Feed.\nUpdate price feed with chainlink.\nRoles management for GMSOL.\nDisable a role.\nEnable a role.\nGrant a role to user.\nRevoke a role from the user.\nData Store management for GMSOL.\nAccept store authority.\nInitialize <code>Store</code> account.\nInsert factor.\nSet new token map.\nTransfer receiver.\nTransfer store authority.\nToken accounts management for GMSOL.\nClose a claimable account if it is emtpy.\nPrepare associated token account.\nPrepare a claimable account.\nToken Config.\nToken config management for GMSOL.\nGet token decimals.\nGet expected price provider.\nReturns the argument unchanged.\nInitialize a  <code>TokenMap</code> account.\nInsert or update config the given synthetic token.\nInsert or update config for the given token.\nCalls <code>U::from(self)</code>.\nGet is enabled.\nCheck if the config of the given token is enbaled.\nGet name.\nGet price precision.\nSet expected provider.\nToggle token config.\nGet basic token config.\nGet the token decimals for the given token.\nGet expected provider for the given token.\nGet feed address of the provider of the given token.\nGet the name for the given token.\nGet the price precision for the given token.\nGet timestamp adjustment of the given token and provider.\nUser Account Operations.\nAccept referral code transfer.\nCancel referral code transfer.\nInitialize Referral Code.\nPrepare User.\nSet referrer.\nTransfer referral code.\nA feed config.\nFeed account metas.\nFeeds parser.\nFeed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a pull oracle feed parser.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate from <code>TokensWithFeed</code>.\nParse a <code>TokensWithFeed</code>\nParse and sort by tokens.\nProvider Kind.\nToken.\nParse Pyth feeds with price updates map.\nSwitchboard Pull Oracle.\nGateway Env.\nSwtichboard Price Updates type.\nSwitchboard Pull Oracle.\nSwitchboard Pull Oracle Factory.\nThe list of feed pubkeys for which prices were fetched.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from default queue.\nCreate from env.\nCreate with gateways.\nCreate from parts.\nCreate from queue.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake an oracle.\nMake an oracle with the gateway index.\nMake an oracle with the given rng.\nCreate a new factory from the given gateway url.\nGet the total number of the gateways.\nThe list of oracle pubkeys that signed the price updates.\nThe list of price submissions from each oracles.\nThe queue (network) to which all feeds are owned. This …\nSet batch size.\nThe slot number for which the price updates were signed …\nExecute timelocked instruction hint.\nTimelock instructions.\nAccounts.\nApprove timelocked instruction.\nApprove timelocked instruction.\nCancel timelocked instruction.\nCancel timelocked instruction.\nCreate a timelocked instruction buffer for the given …\nExecute timelocked instruction.\nExecutor.\nReturns the argument unchanged.\nIncrease timelock delay.\nInitialize <code>Executor</code> account.\nInitialize <code>TimelockConfig</code> account.\nCalls <code>U::from(self)</code>.\nRent receiver.\nTimelock-bypassed revoke role.\nTimelock-bypassed set expected price provider.\nConfirm GT buyback builder.\nHint for confirming GT buyback.\nCreate Treasury Swap Options.\nTreasury instructions.\nCancel a swap.\nClaim fees to receiver vault.\nComplete GT exchange.\nConfirm GT buyback.\nCreate a swap.\nDeposit to treasury vault.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize <code>Config</code> account.\nInitialize <code>TreasuryVaultConfig</code>.\nInsert token to treasury.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMin swap out amount.\nNonce.\nPrepare GT bank.\nPrepare <code>ConfirmGtBuybackHint</code>.\nRemove token from treasury.\nSet buyback factor.\nSet GT factor.\nSet referral reward factors.\nSet treasury vault config.\nThe market tokens of the swap path.\nSync GT bank.\nToggle token flag.\nTransfer receiver.\nHint for the treasury vault config address.\nWithdraw from treasury vault.\nAddress keys.\nAddresses.\nMax ADL prices staleness (seconds).\nAmount keys.\nAmounts.\nBorrowing fee above optimal usage factor for long.\nBorrowing fee above optimal usage factor for short.\nBorrowing fee base factor for long.\nBorrowing fee base factor for short.\nBorrowing fee exponent for long.\nBorrowing fee exponent for short.\nBorrowing fee factor for long.\nBorrowing fee factor for short.\nBorrowing fee optimal usage factor for long.\nBorrowing fee optimal usage factor for short.\nBorrowing fee receiver factor.\nMarket borrowing fees updated event.\nBurn.\nConfig Keeper.\nThe Chainlink Program.\nChainlink Data Feed.\nChainlink Data Streams.\nClaimable time window (seconds).\nDefault heartbeat duration for price updates.\nDefault precision for price.\nDefault timestamp adjustment.\nDeposit.\nDeposit.\nDeposit Created Event.\nDeposit executed Event.\nDeposit removed event.\nEvent.\nMarket clocks.\nMarket State.\nA pool for market.\nPosition State.\nTrade Fees.\nOutput amounts.\nTrade PnL.\nPrice.\nTrade Prices.\nTransfer Out.\nFeature Keeper.\nFisrt Deposit Receiver Seed.\nFactor keys.\nFactors.\nPrice Feed Config.\nFunding fee decrease factor per second.\nFunding fee exponent.\nFunding fee factor.\nFunding fee increase factor per second.\nFunding fee max factor per second.\nFunding fee min factor per second.\nFunding fee threshold for decrease funding.\nFunding fee threshold for stable funding.\nGLV token seed.\nGT Controller.\nGlv.\nGlv Deposit.\nGLV Deposit removed event.\nGLV pricing event.\nPricing kind.\nGlv Shift.\nGlv Withdrawal.\nGLV Withdrawal removed event.\nGT Update Kind.\nGT updated event.\nType that has market meta.\nHolding.\nIs collateral long.\nIs increase.\nIs long.\nLiquidation fee factor.\nLiquidation fee receiver factor.\nMarket Keeper.\nMax allowed number of markets.\nMaximum length of key.\nMax number of members.\nMax number of roles.\nMax length of the role anme.\nMigration Keeper.\nMarket.\nMarket config keys.\nMarket fees updated event.\nMarket Metadata.\nMarket State Updated Event.\nMax negative position impact factor.\nMax open interest for long.\nMax open interest for short.\nMax PNL factor for long ADL.\nMax PNL factor for long deposit.\nMax PNL factor for long trader.\nMax PNL factor for long withdrawal.\nMax PNL factor for short ADL.\nMax PNL factor for short deposit.\nMax PNL factor for short trader.\nMax PNL factor for short withdrawal.\nMax pool amount for long token.\nMax pool amount for short token.\nMax pool value for deposit for long token.\nMax pool value for deposit for short token.\nMax position impact factor for liquidations.\nMax positive position impact factor.\nFixed size map generated by the macro.\nMin collateral factor.\nMin collateral factor for open interest multiplier for …\nMin collateral factor for open interest multiplier for …\nMin collateral value.\nMin PNL factor after long ADL.\nMin PNL factor after short ADL.\nMin position impact pool amount.\nMin position size usd.\nMin tokens for first deposit.\nMint.\nNonce Bytes.\nOracle Controller.\nOrder Keeper.\nOpen interest reserve factor.\nOracle Account.\nFlags container generated by the macro.\nOracle max age (seconds).\nMax timestamp excess for oracle timestamp (seconds).\nOracle max timestamp range (seconds).\nOracle Ref Price Deviation.\nOrder.\nOrder params.\nOrder created event.\nOrder fee discount for referred user.\nOrder fee factor for negative impact.\nOrder fee factor for positive impact.\nOrder fee receiver factor.\nOrder removed event.\nMarket State.\nPrice Keeper.\nPush Oracle ID.\nA pool storage for market.\nPosition.\nPosition decrease event.\nPosition impact distribute factor.\nPosition impact exponent.\nPosition impact negative factor.\nPosition impact positive factor.\nPosition increased event.\nCustom Price Feed.\nPrice structure for Price Feed.\nSupported Price Provider Kind.\nPrice Validator.\nThe Pyth receiver program.\nPyth Oracle V2.\nRestart Admin. When the cluster restarts, this role can be …\nA <code>u8</code> value indicates that this role is enabled.\nRecent time window (seconds).\nRequest expiration (seconds).\nReserve factor.\nReward.\nThe key of a Role.\nFixed size map generated by the macro.\nRole Metadata.\nRoles Store.\nPrefix seed for program derived addresses.\nData type that has <code>SEED</code>.\nShift.\nShift removed event.\nData Store.\nSwap executed Event.\nSwap fee factor for negative impact.\nSwap fee factor for positive impact.\nSwap fee receiver factor.\nSwap impact exponent.\nSwap impact negative factor.\nSwap impact positive factor.\nThe Switchboard receiver program.\nSwitchboard On-Demand (V3) Data Feed.\nToken Map.\nRead Token Map.\nToken Map Operations.\nHeader of <code>TokenMap</code>.\nToken Map Loader.\nMutable Reference to Token Map.\nReference to Token Map.\nFixed size map generated by the macro.\nTrade event data.\nTrade event.\nTrade Fees.\nTrade Data Flags.\nFlags container generated by the macro.\nOutput amounts.\nTrade PnL.\nPrice.\nPrices.\nTreasury.\nUpdate Order Params.\nHeader of <code>User</code> Account.\nValidate Oracle Time.\nExtension trait for <code>ValidateOracleTime</code>.\nWallet Seed.\nWithdrawal.\nWithdrawal.\nWithdrawal created event.\nWithdrawal executed Event.\nWithdrawal removed event.\nGet accetable price (unit price).\nAcceptable price.\nADL updated clock for long.\nADL updated clock for short.\nAfter state.\nAfter state.\nGet initial collateral delta amount.\nAs a liquidity market.\nConvert to a type that implements <code>Position</code>.\nStore authority.\nAuthority.\nAuthority.\nAuthority.\nBefore state.\nBefore state.\nBorrowing clock.\nBorrowing factor.\nBorrowing fee for receiver amount.\nBorrowing fee for receiver amount.\nBump seed.\nCreate a new burned event.\nClaimable funding fee long token amount.\nClaimable funding fee long token amount.\nClaimable funding fee short token amount.\nClaimable funding fee short token amount.\nGet claimable time key for the given timestamp.\nGet claimable time window size.\nGet claimable time window index for the given timestamp.\nClear.\nClear.\nClear.\nGet clock of the given kind.\nGet updated clocks.\nCollateral amount.\nCollateral token.\nCommon types.\nReturn whether the given market token is contained in this …\nGet decrease position swap type.\nThe time that the position last decreased at.\nDelta borrowing factor.\nDelta claimable amount per size.\nDelta collateral amount.\nDelta funding fee amount per size.\nDelta size in tokens.\nDelta size in usd.\nDeposit.\nDeposit account.\nDeposit.\nDescription.\nDisable this role.\nDisable a role.\nDisable a role.\nEmit this event through CPI. This is a manual …\nEnable this role.\nEnable a role.\nEnable a role.\nGet the index of a enabled role.\nEntries.\nEntries.\nEntries.\nEntries with mutable access.\nEntries with mutable access.\nEntries with mutable access.\nExecuted.\nExecution price.\nExecution price.\nGet expected price provider kind.\nExpected provider.\nExpected price provider.\nFeature.\nGet feed.\nGet feed id.\nPrice Feeds.\nFeeds.\nFees.\nFees.\nFinal output token.\nFinal output token.\nFinal output token.\nFind GLV address.\nFind GLV token address.\nFind PDA for <code>Market</code> account.\nGet first deposit receiver.\nGet first deposit receiver.\nGet flag.\nGet flag.\nFlags.\nTrade flag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from chainlink price report.\nGet from market token.\nGet from market token account.\nGet from market token amount.\nCreate from report.\nCreate from reports.\nCreate from value.\nCreate from value.\nGet the funder.\nFunding clock.\nGet funding factor per second.\nFunding factor per second.\nFunding fee amount.\nFunding fee amount.\nFunding fee amount.\nFunding fee amount per size.\nGet the config of the given token.\nGet.\nGet.\nGet.\nGet address.\nGet address by key.\nGet address mutably\nGet amount.\nGet amount by key.\nGet amount mutably\nGet config.\nGet config by key.\nGet config flag.\nGet config flag by key.\nGet config mutably.\nGet entry by index.\nGet entry by index.\nGet entry by index.\nGet price feed address for the expected provider.\nGet factor.\nGet factor by key.\nGet factor mutably\nGet feature disabled.\nGet the corresponding price feed address.\nGet the corresponding price feed config.\nGet flag.\nGet flag.\nGet trade data flag.\nGet mutably the config of the given token.\nGet mutable reference to the corresponding value.\nGet mutable reference to the corresponding value.\nGet mutable reference to the corresponding value.\nGet primary price for the given token.\nGLV.\nGet the GLV address.\nGLV Deposit.\nGet the GLV token address.\nGLV token.\nGLV token.\nGLV token.\nGLV Withdrawal\nGrant a role.\nGrant a role to the pubkey.\nGrow steps.\nGT.\nGet GT State.\nGet GT state.\nCheck if the given authority has the ADMIN role.\nReturns whether the cluster has restarted since last …\nCheck if the roles has the given enabled role. Returns <code>true</code>…\nCheck if the given role is granted to the pubkey.\nGet the header.\nHeartbeat duration.\nHeartbeat duration.\nHeartbeat duration.\nGet holding address.\nAction id.\nAction id.\nAction id.\nAction id.\nAction id.\nAction id.\nThe time that the position last increased at.\nGet the index of the glv token.\nIndex token price.\nIndex token price.\nIndex token.\nGet market indexer.\nGet market indexer mutably.\nInitialize.\nInitialize the market.\nInput amount.\nThe value of the input amount.\nInsert.\nInsert.\nInsert.\nInsert with options.\nInsert with options.\nInsert with options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nConvert into value.\nIs ADL enabled.\nCheck if the given pubkey is the authority of the store.\nReturn whether the oracle is cleared.\nReturn whether the collateral side is long.\nReturn whether the collateral side is long.\nCheck if the given token is a valid collateral token.\nIs empty.\nIs empty.\nIs empty.\nIs empty.\nWhether this token map is empty.\nIs empty.\nIs enabled.\nIs enbaled.\nIs this market enabled.\nIs the given feature disabled.\nIs GT Minting enabled.\nReturn whether the trade is caused by an increase order.\nReturn whether the trade is caused by an increase order.\nReturn whether the user account is initialized.\nReturn whether the position side is long.\nReturn whether the position side is long.\nIs market open.\nIs this market a pure market, i.e., a single token market.\nWhether the pool only contains one kind of token, i.e. a …\nIs synthetic.\nReturn whether the order is updatable.\nReturns whether the config is a valid pool token config.\nCreate an iterator over the entires of the map.\nGet the key of the store.\nGet order kind.\nGet <strong>initialized</strong> position kind.\nPosition kind (the representation of <code>PositionKind</code>).\nThe type of GLV pricing.\nKind.\nUpdate kind.\nGet position kind.\nGet published slot.\nGet the number of tokens in the map.\nGet length.\nGet length.\nGet length.\nGet the number of tokens.\nTotal liquidation fee amount.\nTotal liquidation fee amount.\nLiquidation fee for pool amount.\nLiquidation fee for pool amount.\nLoad token map.\nLoad token map with mutable access.\nLong token price.\nLong token price.\nGet long token.\nGet the long token address.\nLong token.\nLong token amount.\nLong token balance.\nGet long token balance.\nLong token claimable funding amount per size.\nLong token amount for claimable account of holding.\nLong token amount for claimable account of user.\nLong token.\nThis module defines the <code>Market</code> struct and its associated …\nGet <code>GlvMarketConfig</code> for the given market.\nGet market token.\nGet market token.\nThe market token of the position market.\nMarket token.\nMarket token.\nMarket token.\nMarket token.\nMarket token.\nMarket token.\nMarket token.\nMarket token.\nMarket token.\nMarket token.\nMarket token.\nMarket token.\nMarket token.\nMarket token.\nMarket token.\nMarket token.\nMarket token.\nGet all market tokens.\nMax price.\nMax price.\nGet max oracle ts.\nGet max pool value for deposit.\nGet max price.\nGet all members.\nGet meta.\nMin price.\nMin price.\nGet min oracle slot.\nGet min oracle ts.\nGet min output.\nMin output amount.\nGet min price.\nGet min to market token amount.\nGet min tokens for first deposit.\nCreate a new minted event.\nMinting cost.\nGet token name.\nGet the name of this role.\nGet name.\nName.\nCreate a new feed config.\nCreate a new role metadata.\nCreate.\nGet the next receiver address.\nNext trade id.\nGet the total number of markets.\nGet the number of members.\nGet the number of roles.\nGet opposite token.\nOracle.\nOracle must be updated after this time.\nOracle must be updated after this slot.\nOracle must be updated before this time.\nOrder.\nOrder account.\nOrder.\nOrder address.\nOrder address.\nGet order fee discount factor.\nOrder fee for pool amount.\nOrder fee for pool amount.\nOrder fee for receiver amount.\nOrder fee for receiver amount.\nGet ordered token set.\nGet updated other state.\nOutput amount.\nOutput amount.\nOutput amount.\nOutput amounts.\nOutput amounts.\nOwner.\nOwner.\nOwner.\nOwner.\nOwner.\nOwner.\nOwner.\nPadding.\nGet order params.\nProcessed pnl.\nFinal PnL value.\nProcessed pnl.\nFinal PnL value.\nGet pnl token.\nGet pool.\nGet pool of the given kind.\nGet updated pools.\nPosition.\nGet position address.\nPosition account.\nPosition address.\nPosition address.\nPosition impact distribution report.\nPrice Precision.\nPrecision.\nPrice precision.\nGet price feed price.\nGet price.\nPrice impact diff.\nPrice impact diff.\nPrice impact distribution clock.\nPrice impact value.\nPrice impact value.\nGet prices from oracle.\nPrices.\nPrices.\nGet provider.\nPush a new token config.\nReason.\nReason.\nReason.\nReason.\nReason.\nReason.\nGet the receiver address.\nReceiver.\nReceiver balance.\nReceiver Delta.\nGet referral.\nRemove.\nRemove.\nRemove.\nReport.\nReport.\nReport.\nReport.\nReport.\nCalculate the request expiration time.\nRevision.\nRevision.\nRevision.\nRevision.\nRevision.\nRevision.\nRevision.\nRevision.\nRevision.\nRevoke a role.\nRevoke a role from the pubkey.\nCreate a new rewarded event.\nGet the role store.\nGet the index of a role.\nGet role value for the user.\nRoles.\nGet all roles.\nSecondary output amount.\nSecondary output amount.\nGet secondary output token (pnl token).\nSecondary output token.\nSet ADL enabled.\nSet config flag.\nSet enabled.\nSet enabled.\nSet expected provider.\nSet feed config.\nSet flag\nSet flag.\nSet flag.\nSet flag.\nSet whether the GT minting is enabled.\nSet synthetic.\nShift.\nShift.\nGet last shift executed ts.\nGet max shift price impact factor.\nGet min shift interval.\nGet min shift vaule.\nShort token price.\nShort token price.\nGet short token.\nGet the short token address.\nShort token.\nShort token amount.\nShort token balance.\nGet short token balance.\nShort token claimable funding amount per size.\nShort token amount for claimable account of holding.\nShort token amount for cliamable account of user.\nShort token.\nGet order side.\nGet signer.\nGet size delta in value.\nSize delta in USD.\nSize in tokens.\nSize in usd.\nSlot.\nSlot.\nSlot.\nSlot.\nSlot.\nSlot.\nTrade slot.\nTrade slot.\nSort tokens by provider. This sort is stable.\nGet the space of the whole <code>TokenMap</code> required, excluding …\nGet User Account space.\nGet the space after push.\nGet other market state.\nPosition State.\nFinal state.\nFinal state.\nFinal state.\nFinal state.\nFinal state.\nFinal state.\nStore.\nGet the store address.\nThe authorized store.\nStore.\nStore.\nStore.\nStore.\nStore account.\nStore.\nStore account.\nStore.\nStore.\nStore.\nStore.\nStore account.\nStore.\nStore address.\nStore address.\nAn Anchor generated module containing the program’s set …\nThe supply of the GLV tokens.\nLatest supply.\nGet swap params.\nGet the swap params.\nGet swap params.\nGet swap params.\nRe-export <code>gmsol_timelock</code> types.\nGet timestamp adjustment.\nGet timestamp adjustment.\nTimestamp adjustments.\nGet to market token.\nGet to market token account.\nCreate position from this event.\nCheck if the given token is long token or short token, and …\nToken Config.\nGet token configs for the given market.\nToken decimals.\nToken decimals.\nGet token map address.\nThe token map to used.\nGet all tokens.\nGet tokens.\nGet tokens.\nGet tokens and accounts.\nGet token accounts.\nGet token infos.\nGet token infos.\nGet tokens.\nGet token infos.\nCreate a new <code>TokensCollector</code>.\nTotal borrowing fee amount.\nTotal borrowing fee amount.\nTotal minted.\nGet current trade count.\nTrade count.\nTrade id.\nTrade id.\nTrade id.\nTransfer out.\nTransfer out.\nRe-export <code>gmsol_treasury</code> types.\nGet trigger price (unit price).\nTrigger price.\nInitialize the position state.\nReturns whether the position side is long.\nTry to get pool of the given kind.\nTry converting to <code>Price</code>.\nGet ts.\nEvent time.\nTimestamp.\nEvent time.\nTimestamp.\nTimestamp.\nTimestamp.\nTimestamp.\nEvent time.\nTimestamp.\nTrade ts.\nTrade ts.\nType.\nUncapped PnL value.\nUncapped PnL value.\nUpdate borrowing state report.\nUpdate borrowing state report.\nUpdate config with buffer.\nUpdate funding state report.\nUpdate the feed address for the given price provider. …\nUpdated at.\nUpdated at slot.\nUser.\nUser.\nUser.\nGet valid from ts.\nValid from this timestamp.\nValidate the market.\nValidate whether fees can be claimed by this address.\nValidate whether the given features is enabled.\nValidate max oracle ts.\nValidate min oracle updated slot.\nValidate min oracle ts.\nValidate the cluster has not restarted.\nValidate the cluster has not restarted for mutable …\nValidate output amount.\nValidate that this market is shiftable to the target …\nValidate trigger price.\nValidate that current timestamp &gt;= <code>valid_from_ts</code>.\nGet validated meta.\nTotal value of the GLV.\nWhether the <code>value</code> is maximized.\nVault.\nGet the version of the <code>Glv</code> account format.\nSet expected provider.\nSet heartbeat duration.\nSet precision.\nChange the timestamp adjustment.\nWithdrawal.\nWithdrawal account.\nWithdrawal.\nAction Header.\nAction State.\nCancelled.\nCompleted.\nPending.\nA record of token config.\nTokens with feed.\nCommon action types.\nGet action state.\nGet the bump.\nTransition to Cancelled State.\nTransition to Completed State.\nGet the creator. We assume that the action account’s …\nToken feeds for the tokens, which must be of the same …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>TokenRecord</code> from token config, using the …\nAction id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the state is cancelled.\nCheck if the state is completed.\nCheck if the state is completed or cancelled.\nCheck if the state is pending.\nGet the market.\nMarket.\nGet max execution lamports.\nCreate a new <code>TokenRecord</code>\nGet the nonce.\nNonce bytes.\nThe numbers of tokens of each provider.\nGet the owner.\nOwner.\nProviders set, which must be of the same length with <code>nums</code>.\nGet the receiver.\nGet the rent receiver.\nReturns whether the native token should be unwrapped.\nGet the store.\nStore.\nSwap Params.\nToken accounts.\nToken with feeds.\nTokens that require prices, which must be of the same …\nCreate from token records.\nGet last updated timestamp.\nGet last updated slot.\nAction.\nExtentsion trait for <code>Action</code>.\nAction Flags.\nFlags container generated by the macro.\nAction Header.\nAction Parameters.\nAction Signer.\nAction State.\nCancelled.\nClosable Action.\nClosed Event.\nCompleted.\nMin execution lamports.\nPending.\nShould unwrap native token.\nAs signer seeds.\nGet max allowed execution fee in lamports.\nExecution lamports.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nGet flag.\nGet the header.\nAction id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nMarket.\nCreate a new action signer.\nNonce bytes.\nOwner.\nSet flag.\nAction signer.\nStore.\nTo closed event.\nValidate balance.\nHas swap parameters.\nMax total number of tokens of swap path.\nMax total length of swap paths.\nSwap params.\nGet the first market token in the swap path.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterate over both swap paths, primary path first then …\nGet the last market token in the swap path.\nGet the number of tokens.\nThe number of tokens.\nPadding.\nSwap paths.\nGet the length of primary swap path.\nThe length of primary swap path.\nGet primary swap path.\nGet the length of secondary swap path.\nThe length of secondary swap path.\nGet secondary swap path.\nGet the swap params.\nConvert to tokens with feed.\nConvert to token records.\nGet all tokens for the action.\nTokens.\nGet unique market tokens excluding current market token.\nGet validated primary swap path.\nGet validated secondary swap path.\nToken Account.\nTokens Collector.\nGet account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize with token account.\nInitialize with token account interface.\nInsert a new token.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a vec.\nCreate a new <code>TokensCollector</code>.\nConvert to <code>TokensWithFeed</code>.\nGet token.\nGet token and account.\nA record of token config.\nTokens with feed.\nToken feeds for the tokens, which must be of the same …\nThe numbers of tokens of each provider.\nProviders set, which must be of the same length with <code>nums</code>.\nCollect token records for the give tokens.\nTokens that require prices, which must be of the same …\nDeposit.\nDeposit Params.\nToken Accounts.\nPDA for first deposit owner.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitial long token accounts.\nInitial short token accounts.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet market token.\nGet market token account.\nAction Disabled Flag.\nAuto-deleveraging Order.\nCancel.\nCreate.\nDefault Action.\nDeposit.\nDisabled Features State.\nFixed size map generated by the macro.\nDomain Disabled Flag.\nExecute.\nGLV deposit.\nGLV shift.\nGLV withdrawal.\nLimit Decrease Order.\nLimit Increase Order.\nLimit Swap Order.\nLiquidation Order.\nMarket Decrease Order.\nMarket Increase Order.\nMarket Swap Order.\nShift.\nStop-loss Decrease Order.\nUpdate.\nWithdrawal.\nClear.\nDisplay feature.\nEntries.\nEntries with mutable access.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet.\nGet entry by index.\nGet mutable reference to the corresponding value.\nInsert.\nInsert with options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs empty.\nGet length.\nRemove.\nGlv.\nGlv Deposit.\nGLV Deposit Params.\nToken and accounts.\nMarket Config for GLV.\nGLV Market Config Flag.\nFlags container generated by the macro.\nFixed size map generated by the macro.\nGlv Shift.\nGlv Withdrawal.\nGLV Withdrawal Params.\nToken and accounts.\nIs deposit allowed.\nGLV Update Params.\nGet balance.\nClear.\nEntries.\nEntries with mutable access.\nGet final long token.\nGet final long token account.\nGet final short token.\nGet final short token account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nGet.\nGet entry by index.\nGet flag.\nGet flag.\nGet mutable reference to the corresponding value.\nGet GLV token.\nGet GLV token.\nGet GLV token account.\nGet GLV token account.\nInitial long token and account.\nInitial short token and account.\nInsert.\nInsert with options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nIs empty.\nReturns whether the update is empty.\nGet length.\nGet market token.\nGet market token.\nGet market token account.\nGet market token account.\nGet max amount.\nGet max value.\nThe minimum acceptable amount of final long tokens to …\nThe minimum acceptable amount of final short tokens to …\nMinimum amount for the first GLV deposit.\nRemove.\nSet flag.\nMaximum price impact factor after shift.\nMinimum shift interval seconds.\nMinimum shift value.\nStore.\nConfirmed.\nGT Exchange Account.\nGT Exchange Vault Flags.\nFlags container generated by the macro.\nGT Exchange Vault.\nGT Exchange Vault Flags.\nFlags container generated by the macro.\nInitialized.\nInitialized.\nGet amount.\nGet amount.\nBump seed.\nBump.\nGet GT decimals.\nGet time window for GT exchange.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nCreate from value.\nGet flag.\nGet flag.\nGet time window index.\nGet grow steps.\nGet GT vault.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nConvert into value.\nGet whether the vault is comfirmed.\nReturns whether the GT state is initialized.\nGet whether the vault is initialized.\nGet whether the vault is initialized.\nGet minting cost.\nGet the owner address.\nOwner address.\nSet exchange time window.\nSet flag.\nSet flag.\nStore.\nStore address.\nGet GT supply.\nGet time window.\nGet current time window index.\nGet time window as <code>u32</code>.\nGet total minted.\nValidate that this vault is confirmable.\nValidate that this vault is depositable.\nGet vault.\nVault address.\nAs a liquidity market.\nIs auto-deleveraging enabled for long.\nIs auto-deleveraging enabled for short.\nMarket clocks.\nIs enabled.\nIs GT minting enabled.\nType that has market meta.\nMarket indexer.\nMax number of flags.\nMarket.\nMarket Flags.\nFlags container generated by the macro.\nMarket Metadata.\nMarket State.\nIs Pure.\nClock ops.\nMarket Config.\nGet current deposit count.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nGet flag.\nGet current GLV deposit count.\nGet current GLV withdrawal count.\nIndex token.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nLong token.\nMarket token.\nCreate a new <code>AsLiquidityMarket</code>.\nNext deposit id.\nNext GLV deposit id.\nNext GLV withdrawal id.\nNext order id.\nNext shift id.\nNext withdrawal id.\nGet current order count.\nPool.\nRevertible Market Operations.\nSet flag.\nGet current shift count.\nShort token.\nMarket Status.\nStore.\nMarket Utils.\nGet current withdrawal count.\nClock-related operations.\nClock-related operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJust passed in seconds.\nPassed in seconds.\nBorrowing fee above optimal usage factor for long.\nBorrowing fee above optimal usage factor for short.\nBorrowing fee base factor for long.\nBorrowing fee base factor for short.\nBorrowing fee exponent for long.\nBorrowing fee exponent for short.\nBorrowing fee factor for long.\nBorrowing fee factor for short.\nBorrowing fee optimal usage factor for long.\nBorrowing fee optimal usage factor for short.\nBorrowing fee receiver factor.\nAn entry of the config buffer.\nAn entry of the config buffer.\nFunding fee decrease factor per second.\nFunding fee exponent.\nFunding fee factor.\nFunding fee increase factor per second.\nFunding fee max factor per second.\nFunding fee min factor per second.\nFunding fee threshold for decrease funding.\nFunding fee threshold for stable funding.\nIgnore open interest for usage factor.\nLiquidation fee factor.\nLiquidation fee receiver factor.\nMax number of config flags.\nMarket Config.\nMarket Config Buffer.\nMarket Config Flags.\nFlags container generated by the macro.\nMarket config keys.\nMax negative position impact factor.\nMax open interest for long.\nMax open interest for short.\nMax PNL factor for long ADL.\nMax PNL factor for long deposit.\nMax PNL factor for long trader.\nMax PNL factor for long withdrawal.\nMax PNL factor for short ADL.\nMax PNL factor for short deposit.\nMax PNL factor for short trader.\nMax PNL factor for short withdrawal.\nMax pool amount for long token.\nMax pool amount for short token.\nMax pool value for deposit for long token.\nMax pool value for deposit for short token.\nMax position impact factor for liquidations.\nMax positive position impact factor.\nMin collateral factor.\nMin collateral factor for open interest multiplier for …\nMin collateral factor for open interest multiplier for …\nMin collateral value.\nMin PNL factor after long ADL.\nMin PNL factor after short ADL.\nMin position impact pool amount.\nMin position size usd.\nMin tokens for first deposit.\nOpen interest reserve factor.\nOrder fee factor for negative impact.\nOrder fee factor for positive impact.\nOrder fee receiver factor.\nPosition impact distribute factor.\nPosition impact exponent.\nPosition impact negative factor.\nPosition impact positive factor.\nReserve factor.\nSkip borrowing fee for smaller side.\nSwap fee factor for negative impact.\nSwap fee factor for positive impact.\nSwap fee receiver factor.\nSwap impact exponent.\nSwap impact negative factor.\nSwap impact positive factor.\nAuthority.\nExpiration time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nGet flag.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nReturn whether the buffer is empty.\nCreate an iterator of entries.\nGet key.\nKey.\nReturn the number of entries.\nSet flag.\nStore.\nGet value.\nValue.\nA pool for market.\nA pool storage for market.\nMarket Pools.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the long token amount.\nGet the short token amount.\nRevertible type.\nConvert a <code>RevertibleMarket</code> to a <code>LiquidityMarketMut</code>.\nRevertible Market.\nRevertible Position.\nType that has a revision.\nCommit the changes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRevertible Liquidity Market.\nRevertible Market.\nGet the revision.\nRevertible Position.\nRevertible Swap Market.\nConvert a <code>RevertibleMarket</code> to a <code>LiquidityMarketMut</code>.\nDeposit.\nRevertible Market.\nShift.\nSwap.\nSwap Pricing Kind.\nWithdrawal.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRevertible Position.\nA map of markets used for swaps where the key is the …\nCommit the swap.\nReturns the argument unchanged.\nGet market.\nGet market mutably.\nCalls <code>U::from(self)</code>.\nMarket Status.\nBorrowing factor per second for long.\nBorrowing factor per second for short.\nReturns the argument unchanged.\nCreate from market and prices.\nFunding factor per second.\nCalls <code>U::from(self)</code>.\nPending pnl for long.\nPending pnl for short.\nPool value without pnl for long.\nPool avlue without pnl for short.\nReserve value for long.\nReserve value for short.\nTrait for defining operations related to auto-deleveraging.\nExtension trait for validating market balances.\nLatest ADL time.\nValidate if the ADL can be executed.\nValidate market balance for the given token.\nValidate market balances.\nValidate market balances excluding the given token amounts.\nThe Chainlink Program.\nChainlink Data Feed.\nChainlink Data Streams.\nOracle Account.\nFlags container generated by the macro.\nCustom Price Feed.\nPrice structure for Price Feed.\nSupported Price Provider Kind.\nPrice Validator.\nThe Pyth receiver program.\nPyth Oracle V2.\nThe Switchboard receiver program.\nSwitchboard On-Demand (V3) Data Feed.\nValidate Oracle Time.\nExtension trait for <code>ValidateOracleTime</code>.\nAuthority.\nChainlink.\nOracle must be updated after this time.\nOracle must be updated after this slot.\nOracle must be updated before this time.\nPrice Map.\nPyth.\nStore.\nSwitchboard.\nOracle time validation.\nValidate max oracle ts.\nValidate min oracle updated slot.\nValidate min oracle ts.\nPrice Validator.\nThe Chainlink Program.\nMax tokens.\nFixed size map generated by the macro.\nZero-copy price structure for storing min max prices.\nClear.\nEntries.\nEntries with mutable access.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet.\nGet entry by index.\nGet mutable reference to the corresponding value.\nInsert.\nInsert with options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs empty.\nReturns whether the token is synthetic.\nGet length.\nGet max price.\nGet min price.\nRemove.\nConvert to <code>Price</code>.\nThe Pyth receiver program.\nConvert pyth price value with confidence to <code>Price</code>.\nThe Switchboard receiver program.\nValidate Oracle Time.\nExtension trait for <code>ValidateOracleTime</code>.\nOracle must be updated after this time.\nOracle must be updated after this slot.\nOracle must be updated before this time.\nValidate max oracle ts.\nValidate min oracle updated slot.\nValidate min oracle ts.\nDefault timestamp adjustment.\nPrice Validator.\nAuto-deleveraging Order.\nRecevier Kind.\nLimit Decrease.\nLimit Increase.\nLimit Swap.\nLiquidation: allows liquidation of positions if the …\nLong.\nDecrease position at the current market price.\nIncrease position at the current market price.\nSwap token A to token B at the current market price.\nOrder.\nOrder params.\nOrder Kind.\nOrder side.\nToken accounts for Order.\nShort.\nStop-Loss Decrease.\nTransfer Out.\nUpdate Order Params.\nAcceptable price.\nReturn whether the order is executed.\nGet final output token info.\nFinal output token.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet initial collateral token info.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs decrease position order.\nIs increase position order.\nReturn whether the side is long.\nIs market order.\nIs market decrease.\nIs swap order.\nReturn whether the output for user is empty.\nGet long token info.\nLong token.\nLong token amount for claimable account of holding.\nLong token amount for claimable account of user.\nMin output amount.\nSecondary output token.\nGet short token info.\nShort token.\nShort token amount for claimable account of holding.\nShort token amount for cliamable account of user.\nSize delta in USD.\nTrigger price.\nValid from this timestamp.\nA helper type that implements the <code>Position</code> trait.\nLong position.\nPosition.\nPosition Kind.\nPosition State.\nShort position.\nUninitialized.\nBorrowing factor.\nBump seed.\nCollateral amount.\nCollateral token.\nThe time that the position last decreased at.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunding fee amount per size.\nThe time that the position last increased at.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPosition kind (the representation of <code>PositionKind</code>).\nLong token claimable funding amount per size.\nThe market token of the position market.\nOwner.\nPadding.\nShort token claimable funding amount per size.\nSize in tokens.\nSize in usd.\nPosition State.\nStore.\nTrade id.\nCreate from the position and market.\nUpdated at slot.\nMax number of members.\nMax number of roles.\nMax length of the role anme.\nFixed size map generated by the macro.\nThe key of a Role.\nFixed size map generated by the macro.\nRole Metadata.\nRoles Store.\nShift.\nAddress keys.\nAddresses.\nMax ADL prices staleness (seconds).\nAmount keys.\nAmounts.\nClaimable time window (seconds).\nFactor keys.\nFactors.\nHolding.\nOracle max age (seconds).\nMax timestamp excess for oracle timestamp (seconds).\nOracle max timestamp range (seconds).\nOracle Ref Price Deviation.\nOrder fee discount for referred user.\nRecent time window (seconds).\nRequest expiration (seconds).\nData Store.\nTreasury.\nStore authority.\nThe token map to used.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApproved.\nExecutor.\nExecutor Wallet Signer.\nInstruction Access.\nInstruction Account.\nFlags of Instruction Accounts.\nFlags of Instruction.\nFlags container generated by the macro.\nInstruction Header.\nInstruction Loader.\nReference to the instruction.\nIs signer.\nTimelock Config.\nWallet Seed.\nIs mutable.\nGet accounts.\nGet approver.\nGet the approved timestamp.\nTimelock Config.\nCreate executor wallet PDA.\nGet data.\nGet delay.\nExecutor.\nGet executor.\nFind executor wallet PDA.\nFlags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nGet flag.\nAn Anchor generated module containing the program’s set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nReturns whether the instruction is approved.\nReturn whether the instruction is executable.\nLoad and initialize the instruction.\nLoad instruction.\nGet the number of accounts.\nGet program ID.\nPubkey.\nGet rent receiver.\nGet role name.\nSet flag.\nConvert to instruction.\nUtils for using instruction buffer.\nGet wallet.\nGet executor wallet.\nTimelock Config.\nExecutor.\nExecutor Wallet Signer.\nCreate executor wallet PDA.\nFind executor wallet PDA.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstruction Buffer.\nReturns the argument unchanged.\nGet header.\nCalls <code>U::from(self)</code>.\nDefault heartbeat duration for price updates.\nDefault precision for price.\nDefault timestamp adjustment.\nPrice Feed Config.\nToken Map.\nRead Token Map.\nToken Map Operations.\nHeader of <code>TokenMap</code>.\nToken Map Loader.\nMutable Reference to Token Map.\nReference to Token Map.\nFixed size map generated by the macro.\nExpected provider.\nExpected price provider.\nPrice Feeds.\nFeeds.\nFlags.\nGet the config of the given token.\nGet mutably the config of the given token.\nHeartbeat duration.\nHeartbeat duration.\nLoad token map.\nLoad token map with mutable access.\nName.\nPrecision.\nPrice precision.\nPush a new token config.\nSort tokens by provider. This sort is stable.\nThe authorized store.\nTimestamp adjustments.\nGet token configs for the given market.\nToken decimals.\nUtils for using token map.\nToken Map.\nTreasury config account.\nGT Bank.\nTreasury vault config account.\nIterate over token balances.\nGet buyback factor.\nConfig.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet balance of the given token\nGT.\nGet GT exchange vault address.\nGet GT factor.\nAn Anchor generated module containing the program’s set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the GT bank is initialized.\nGet the number of tokens.\nGet the number of tokens.\nCreate tokens with feed.\nGet all tokens.\nGet all tokens.\nTreasury.\nGet the treasury vault config address.\nGet treasury vault config address.\nTreasury config account.\nConfig Signer.\nReceiver Signer.\nAs signer seeds.\nAs signer seeds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate from config address and bump.\nGT Bank.\nFlags of GT Bank.\nFlags container generated by the macro.\nGt Bank Signer.\nInitialized.\nToken Balance.\nFixed size map generated by the macro.\nAs signer seeds.\nClear.\nEntries.\nEntries with mutable access.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nGet.\nGet entry by index.\nGet flag.\nGet mutable reference to the corresponding value.\nInsert.\nInsert with options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nIs empty.\nGet length.\nRemove.\nSet flag.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllow deposit.\nAllow withdrawal.\nMax number of treasury token flags.\nToken config for treasury.\nToken Flags.\nFlags container generated by the macro.\nFixed size map generated by the macro.\nTreasury vault config account.\nTreasury Vault Signer.\nAs signer seeds.\nClear.\nEntries.\nEntries with mutable access.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nGet.\nGet entry by index.\nGet flag.\nGet mutable reference to the corresponding value.\nInsert.\nInsert with options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nIs empty.\nGet length.\nRemove.\nSet flag.\nIs initialized.\nThe length of referral code.\nMax flags.\nReferral.\nReferral Code Bytes.\nReferral Code.\nUser flags.\nFlags container generated by the macro.\nGT State.\nHeader of <code>User</code> Account.\nGet GT balance.\nGet the referral code account address.\nCode bytes.\nDecode the given code string to code bytes.\nEncode the given code to code string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from value.\nGet flag.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into value.\nGet minted fee value.\nGet next owner.\nOwner.\nGet total paid fee value.\nGet current rank.\nGet the user account address of the referrer.\nSet flag.\nStore.\nWithdrawal.\nWithdrawal params.\nToken Accounts.\nGet final_long token.\nGet final_long token account.\nGet final_short token.\nGet final_short token account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet market token.\nGet market token account.\nMarket token amount to burn.\nThe minimum acceptable amount of final long tokens to …\nThe minimum acceptable amount of final short tokens to …\nEvent authority SEED.\nToken Account Params.\nWith Slot.\nUtils for action builders.\nUtils for fixed-point numbers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet of fetch token and token account.\nGet or find associated token account.\nInstruction utils.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto value.\nReturns whether the params is empty.\nApply a function on the value.\nCreate a new <code>WithSlot</code>.\nSolana RPC utils.\nSet token.\nSet token account.\nSigner.\nGet slot.\nGet the mutable reference of the slot.\nSplit.\nUtils for token calculation.\nGet token.\nTranspose.\nGet value.\nGet the mutable reference for the value.\nView the return data by simulating the transaction.\nWorkarounds\nBuidler for transaction bundle.\nBundle Options.\nEstimate Execution Fee.\nBuilder for <code>BundleBuilder</code>s.\nExtension trait for <code>MakeBundleBuilder</code>.\nMake bundle builder that can only be used once.\nSet Execution Fee.\nSurround transaction.\nInsert all the instructions of <code>other</code> into <code>self</code>.\nBuild.\nBuild with options.\nGet the client.\nEstimate execution fee.\nEstimate Execution Fee.\nWhether to force one transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>BundleBuilder</code> from <code>RpcClient</code>.\nCreate a new <code>BundleBuilder</code> from <code>RpcClient</code> with the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet back all collected <code>TransactionBuilder</code>s.\nIs empty.\nWhether the execution fee needed to be estiamted.\nMax number of instructions for one transaction.\nMax packet size.\nCreate a new <code>BundleBuilder</code> for the given cluster.\nEstiamte fee before building the transaction.\nCreate a new <code>BundleBuilder</code> with the given options.\nCreate a <code>MakeBundleBuilder</code> from a <code>BundleBuilder</code>.\nSet Oracle Price Feed.\nGet packet size.\nAppend a transaction to the post-transaction list.\nPrepend a transaction to the pre-transaction list.\nPush a <code>TransactionBuilder</code>.\nPush <code>TransactionBuilder</code>s.\nSend all in order and returns the signatures of the …\nSend all in order with the given options and returns the …\nSet execution fee.\nSet options.\nSurround transaction.\nSurround the current builder.\nTry clone empty.\nTry to push a <code>TransactionBuilder</code> to the builder.\nPush a <code>TransactionBuilder</code> with options.\nEstimate Execution Fee.\nSet Execution Fee.\nWhether the execution fee needed to be estiamted.\nSet execution fee.\nA mapping from feed id to the corresponding feed address.\nFeed IDs.\nPost pull oracle price updates.\nPrice Update Instructions.\nPrice Updates.\nPull Oracle.\nPull Oracle Price Consumer.\nBuild with pull oracle instructions.\nReturns a reference to tokens and their associated feed …\nFetch instructions to post the price updates.\nFetch Price Update.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch the required price updates and use them to construct …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge.\nFetch the required price updates and use them to construct …\nCreate a new empty price update instructions.\nCreate from <code>store</code> and <code>tokens_with_feed</code>.\nProcesses the feed address map returned from the pull …\nGet the store address.\nPush a close instruction.\nPush a post price update instruction.\nConstruct transactions with the given pull oracle and …\nSurround transaction.\nConvert signed fixed-point amount to <code>Decimal</code>.\nConvert signed fixed-point value to <code>Decimal</code>.\nConvert signed USD value to <code>Decimal</code>.\nConvert unsigned fixed-point amount to <code>Decimal</code>.\nConvert unsigned fixed-point number to <code>Decimal</code>.\nConvert unsigned USD value to <code>Decimal</code>.\nBase58 (Squads).\nBase64.\nSPL-Governance format.\nInstruction serialziation format.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize an instruction.\nAccount RPC utils.\nContext.\nPubsub client.\nTransaction history.\nProgram Accounts Config.\nProgram Accounts Config.\nAccount Config.\nReturn the decoded account at the given address, along …\nReturns all program accounts of the given type matching …\nCommitment.\nFilters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet account with context.\nGet program accounts with context.\nGet token accounts by owner and return with the context.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMin context slot.\nWhether to skip the account type filter.\nWith Context.\nWith Slot.\nGet API version.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInto value.\nApply a function on the value.\nGet response slot.\nTranspose.\nGet a refercne to the value.\nGet a mutable reference to the value.\nA wrapper of the solana version of pubsub client with …\nConfig for subscription manager.\nCapacity for the broadcast channel.\nCleanup interval.\nCommitment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSubscribe to transaction logs.\nCreate a new <code>PubsubClient</code> with the given config.\nReset the client.\nShutdown gracefully.\nExtract encoded CPI events from transaction history.\nFetch transaction history for an address.\nDyn signer.\nLocal dyn signer.\nLocal Signer.\nShared Signer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new local signer.\nCreate a new shared signer.\nPrice to min output amount.\nWorkaround for optional accounts.\nZero-copy account workaround.\nChange the <code>pubkey</code> of any readonly, non-signer <code>AccountMeta</code> …\nWrapper for deserializing account into arced type.\nWorkaround for deserializing zero-copy accounts and …\nWorkaround for deserializing zero-copy accounts.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConver into inner value.\nConver into inner value.\nConver into inner value.\nA workaround to deserialize “zero-copy” account data.")