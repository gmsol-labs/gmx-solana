searchState.loadedDescShard("gmsol_sdk", 0, "Add transaction error.\nA group of instructions that are expected to be executed …\nClient error.\nCompile message error.\nCustom error.\nContains the error value\nHint.\nA trait representing types that can be converted into …\nMerge transaction error.\nContains the success value\nA group of atomic instructions that can be executed in …\nParse cluster error.\nParse url error.\nResult type.\nSigner error.\nError type.\nTransaction Group.\nAdd an instruction.\nAdd an <code>AtomicGroup</code>.\nAdd a <code>ParallelGroup</code>.\nAdd an owned signer.\nAdd a signer.\nInstruction Builders.\nGet compute budget.\nGet mutable reference to the compute budget.\nConstants.\nCreate a custom error.\nError type.\nReturns signers that need to be provided externally …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns instructions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into <code>AtomicGroup</code>s.\nMarket calculations.\nMaintains a graph structured with <code>MarketModel</code> as edges.\nMerge two <code>AtomicGroup</code>s.\nCreate versioned message with the given blockhash and …\nModel support.\nCreate a new empty group.\nOptimize the transactions by repacking instructions to …\nCreate partially signed transaction with the given …\nReturns the pubkey of the payer.\nFunctions for constructing Program Derived Addresses.\nPosition calculations.\nBuild transactions.\nEstimates the transaciton size.\nEstimates the transaction size after merge.\nUtils.\nReturns <code>Ok</code> if the given <code>ParallelGroup</code> can be added without …\nCreate from an iterator of instructions.\nCreate with the given <code>TransactionGroupOptions</code> and …\nNonce Bytes.\nInstruction builders related to order.\nStore Program.\nInstruction builders related to token.\nInstruction builders related to user.\nMin execution lamports for order.\nBuilder for the <code>close_order</code> instruction.\nBuilder for the <code>create_order</code> instruction.\nBuilder for the <code>update_order</code> instruction.\nBuilder for the <code>close_order</code> instruction.\nHint for <code>CloseOrder</code>.\nCreate a builder for building <code>CloseOrder</code>. On the builder, …\nCreate a builder for building <code>CloseOrderHint</code>. On the …\nFinal output token.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitial collateral token.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLong token.\nOrder.\nOwner.\nPayer.\nProgram.\nReason.\nReceiver.\nReferrer.\nRent Receiver.\nShort token.\n<code>should_unwrap_native_token</code> flag.\nSwap collateral token to PnL token.\nBuilder for the <code>create_order</code> instruction.\nHint for <code>CreateOrder</code>.\nCreate Order Kind.\nParameters for creating an order.\nSwap type for decreasing position.\nLimit Decrease.\nLimit Increase.\nLimit Swap.\nMarket Decrease.\nMarket Increase.\nMarket Swap.\nDo not swap.\nSwap PnL token to collateral token.\nStop-loss Decrease.\nAcceptable price (in unit price).\nDelta amount of tokens:\nCreate a builder for building <code>CreateOrderParams</code>. On the …\nCreate a builder for building <code>CreateOrder</code>. On the builder, …\nCreate a builder for building <code>CreateOrderHint</code>. On the …\nCollateral or swap out token.\nDecrease Position Swap Type.\nExecution fee paid to the keeper in lamports.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the ordr kind is “decrease”.\nReturns whether the order kind is “increase”.\nWhether the order is for a long or short position.\nReturns whether the order kind is “swap”.\nOrder Kind.\nLong token.\nThe market token of the market in which the order will be …\nMinimum amount or value of output tokens.\nNonce for the order.\nOrder Parameters.\nPay token.\nPay token account.\nPayer (a.k.a. owner).\nProgram.\nReceive token.\nReciever.\nShort token.\nDelta size in USD.\nSwap path.\nTrigger price (in unit price).\nWhether to unwrap the native token when receiving (e.g., …\nTimestamp from which the order becomes valid.\nBuilder for the <code>update_order</code> instruction.\nHint for <code>UpdateOrder</code>.\nParameters for creating an order.\nAcceptable price.\nCreate a builder for building <code>UpdateOrder</code>. On the builder, …\nCreate a builder for building <code>UpdateOrderParams</code>. On the …\nCreate a builder for building <code>UpdateOrderHint</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarket token.\nMin output.\nOrder.\nParameters.\nPayer (a.k.a. owner).\nProgram.\nSize delta value.\nTrigger price.\nValid from this timestamp.\nBuidler for Store Program Instruction.\nNonce Bytes.\nA store program.\nAppend accounts.\nConvert to account metas.\nBuild.\nCreate a builder for building <code>StoreProgram</code>. On the …\nFind the event authority address.\nFind market address.\nFind order address.\nFind position address.\nFind the store wallet address.\nFind user address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProgram ID.\nCreate an instruction builder.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStore address.\nNative mint.\nPrepare token accounts for the owner.\nWhether to skip the ATA preparation.\nWraps the native token into its corresponding associated …\nCreate a builder for building <code>PrepareTokenAccounts</code>. On the …\nCreate a builder for building <code>WrapNative</code>. On the builder, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLamports.\nOwner.\nOwner.\nPayer.\nToken Program ID.\nTokens.\nPrepare user account.\nCreate a builder for building <code>PrepareUser</code>. On the builder, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPayer (a.k.a. owner).\nStore program.\nAdjustment factor for saving funding amount per size.\nDefault decimals for calculation.\nDecimals of market tokens.\nUSD value to amount divisor.\nUnit USD value i.e. <code>one</code>.\nMax length of the role anme.\nNumber of market config flags.\nNumber of market flags.\nRoles.\nAdmin role name.\nAccount.\nAnchor Error.\nAnchor Error with owned source.\nAnchor Lang Error.\nBase64 decode error.\nCustom error.\nSDK Error.\nError origin with owned source.\nMarket Graph Errors\nModel Error.\nNot found error.\nParse Pubkey Error.\nError from <code>gmsol_programs</code>.\nError from [<code>gmsol-solana-utils</code>].\nSource.\nTransport error.\nAnchor Error Code.\nCreate a custom error.\nError code.\nError message.\nError name.\nError origin.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogs.\nCreate a transport error.\nMarket Calculations.\nMarket Status.\nCalculate market status.\nValue.\nMarket Status.\nBorrowing fee rate per second for long.\nBorrowing fee rate per second for short.\nReturns the argument unchanged.\nFunding fee rate per hour for long.\nFunding fee rate per hour for short.\nCalls <code>U::from(self)</code>.\nLiquidity for long.\nLiquidity for short.\nMax liquidity for long.\nMax liquidity for short.\nMax reserve value for long.\nMax reserve value for short.\nMin collateral factor for long.\nMin collateral factor for short.\nOpen interest for long.\nOpen interest for short.\nOpen interest in tokens for long.\nOpen interest in tokens for short.\nPending pnl for long.\nPending pnl for short.\nPool value without pnl for long.\nPool avlue without pnl for short.\nReserved value for long.\nReserved value for short.\nMin max signed values.\nMin max values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax value.\nMax value.\nMin value.\nMin value.\nBest Swap Paths.\nMarket Graph.\nReturn whether there is an arbitrage opportunity.\nFind the best swap path for the given source and target.\nConfig.\nError type.\nEstimation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet market by its market token.\nGet all index tokens.\nInsert or update a market.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet all market tokens.\nGet all markets.\nGet swap estimation params.\nGet the source.\nGet best swap path to the target.\nUpdate base cost.\nUpdate max steps.\nUpdate token price.\nUpdate value for the estimation.\nCreate from the given <code>MarketGraphConfig</code>.\nConfig for <code>MarketGraph</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMax steps.\nEstimation Params for swap.\nMarket Graph Error.\nNegative Cycle.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEstimation Parameters for Swap.\nBase cost.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValue.\nADL updated clock for long.\nADL updated clock for short.\nBalanced amounts.\nExtension trait for <code>Balance</code> with utils.\nA bank of tokens.\nBase Market trait.\nExtension trait for <code>BaseMarket</code>.\nBase Market trait for mutable access.\nExtension trait for <code>BaseMarketMut</code>.\nBorrowing.\nBorrowing factor.\nA market with borrowing fees.\nExtension trait for <code>BorrowingFeeMarket</code>.\nA market that can update the borrowing fees.\nExtension trait for <code>BorrowingFeeMarketMut</code>.\nBuild params error.\nClaimable fee.\nClaimable funding amount per size for long.\nClaimable funding amount per size for short.\nThe kind of clocks.\nCollateral sum for long.\nCollateral sum for short.\nUnknown computation error.\nConvert error.\nDelta Amounts.\nDivided by zero.\nEmpty deposit.\nEmpty swap.\nEmpty withdrawal.\nContains the error value\nError type.\nFor auto-deleveraging.\nFunding.\nFunding amount per size for long.\nFunding amount per size for short.\nInsufficient funds to pay for cost.\nInsufficient reserve.\nInsufficient reserve for open interest.\nInvalid Argument.\nInvalid pool value.\nInvalid position state.\nInvalid prices.\nInvalid token balance.\nLiquidatable Position.\nA market for providing liquidity.\nExtension trait of <code>LiquidityMarket</code>.\nA market for providing liquidity.\nExtension trait of <code>LiquidityMarketMut</code>.\nMarket errors from [<code>gmsol-utils</code>].\nMarket type.\nMarket Action.\nMarket Model.\nFor deposit.\nFor withdrawal.\nFor trader.\nMax open interest exceeded.\nMax pool amount exceeded.\nMax pool value for deposit exceeded.\nMin factor after auto-deleveraging.\nMint receiver not set.\nMissing clock of kind.\nMissing pool of kind.\nNot liquidatable.\nUnsigned number type.\nUnsigned number type used in the market.\nNumber type.\nUnsigned number type.\nContains the success value\nOpen Interest for long.\nOpen Interest for short.\nOpen Interest in tokens for long.\nOpen Interest in tokens for short.\nOverflow.\nA perpetual market.\nExtension trait for <code>PerpMarket</code>.\nA mutable perpetual market.\nExtension trait for <code>PerpMarketMut</code>.\nPnl Factor Exceeded.\nPnl Factor Kind.\nA balance for holding tokens, usd values, or factors\nPool type.\nComputation error in pool\nExtension trait for <code>Pool</code> with utils.\nPool kind.\nPosition with access to its market.\nExtension trait for <code>Position</code> with utils.\nPosition impact.\nA market with position impact pool.\nExtension trait of <code>PositionImpactMarket</code>.\nA mutable market with position impact pool.\nExtension trait of <code>PositionImpactMarketMut</code>.\nPosition Model.\nPosition with mutable access.\nExtension trait for <code>PositionMut</code> with utils.\nRead-only access to the position state.\nExtension trait for <code>PositionState</code>.\nMutable access to the position state.\nPower computation error.\nPrice Impact Distribution.\nPrimary liquidity pool.\nThe type of the execution report of the action.\nAlias for result.\nSigned number type.\nSigned number type used in the market.\nSigned number type.\nAnchor error.\nSwap impact.\nA market for swapping tokens.\nExtension trait for <code>SwapMarket</code>.\nA mutable market for swapping tokens.\nExtension trait for <code>SwapMarketMut</code>.\nTotal borrowing.\nUnable to get borrowing factor for empty pool value.\nUnable to get funding factor when the open interest is …\nUnimplemented.\nWithdrawal vault not set.\nActions.\nGet amount by side.\nApply delta to the primary pool.\nApply delta.\nApply delta to claimable fee pool.\nApply delta to claimable funding amount per size.\nApply delta to funding amount per size.\nApply delta to long amount.\nApply delta to the position impact pool.\nApply delta to short amount.\nApply a swap impact value to the price impact pool.\nReturns whether the pnl and collateral tokens are the same.\nGet the balance of the given token.\nGet the balance of the given token excluding <code>excluded</code> …\nBank.\nGet a reference to last borrowing factor applied by the …\nGet a mutable reference to last borrowing factor applied …\nGet borrowing factor per second.\nGet borrowing factor pool.\nGet borrowing factor pool mutably.\nGet borrowing fee kink model params.\nGet borrowing fee params.\nPerform burn.\nCaps negative position price impact in-place. If <code>impact</code> is …\nCaps positive position price impact in-place. If <code>impact</code> is …\nGet capped position price impact usd.\nGet position price impact usd and cap the value if it is …\nCheck if the position is liquidatable.\nChecked apply delta amounts.\nGet the claimable fee pool.\nGet the mutable reference of the claimable fee pool.\nGet claimable funding amount per size pool.\nGet claimable funding amount per size pool mutably.\nGet a reference to claimable funding fee amount per size …\nGet current claimable funding fee amount per size.\nGet a mutable reference to claimable funding fee amount …\nClock.\nGet the collateral amount.\nGet a mutable reference to the collateral amount.\nGet collateral price.\nGet collateral sum pool.\nGet collateral sum pool mutably.\nGet collateral value.\nGet current borrowing factor.\nCreate an action to decrease the position.\nCreate a <code>Deposit</code> action.\nCreate a <code>DistributePositionImpact</code> action.\nError type.\nExecute.\nExpected min token balance excluding collateral amount.\nFixed-point decimal type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from parts.\nAdjustment factor for packing funding amount per size.\nGet funding amount per size pool.\nGet funding amount per size pool mutably.\nGet funding factor per second.\nGet funding factor per second mutably.\nGet a reference to the funding fee amount per size.\nGet current funding fee amount per size.\nGet a mutable reference to the funding fee amount per size.\nGet funding fee params.\nReturns whether ignore open interest for usage factor.\nCreate an action to increase the position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the collateral token is the long token of …\nReturn whether the position is considered to be empty …\nReturns whether the position is a long position.\nGet whether it is a pure market.\nGet the just passed time in seconds for the given kind of …\nGet the just passed time in seconds for the given kind of …\nGet the just passed time in seconds for the given kind of …\nGet liquidation fee params.\nGet the liquidity pool.\nGet the liquidity pool mutably.\nGet long delta amount.\nGet the long token amount (when this is a token balance), …\nGet the long amount value in USD.\nMarket.\nGet a reference to the market.\nGet a mutable reference to the market.\nGet market token price.\nGet max open interest.\nGet max pool amount.\nGet max pool value for deposit.\nMerge the amounts with other <code>Balance</code>.\nGet min collateral factor for open interest.\nGet min collateral factor for open interest multiplier.\nPerform mint.\nCreate a new delta amounts.\nCreate from <code>MarketModel</code> and <code>Position</code>.\nCreate delta amounts for both sides.\nCreate a delta amount for one side.\nCreate a long delta amount.\nCreate a short delta amount.\nGet next cumulative borrowing factor of the given side.\nNumber utils.\nDecreased callback.\nIncreased callback.\nInsufficient funding fee payment callback.\nHandle swap error.\nSwapped callback.\nCalled from <code>validate_position</code> to add supplementary checks.\nGet total open interest as a <code>Balance</code>.\nGet total open interest in tokens as a merged <code>Balance</code>.\nGet the open interest in (index) tokens pool.\nGet mutable reference of open interest pool.\nGet the open interest pool.\nGet mutable reference of open interest pool.\nGet open interest reserve factor.\nGet the order fee params.\nMarket params.\nGet the passed time in seconds for the given kind of clock.\nReturns the time in seconds since last funding fee state …\nGet the passed time in seconds for the given kind of clock.\nGet pending borrowing fee value of this position.\nGet pending funding fees.\nGet pending position impact pool distribution amount.\nGet total pnl of the market for one side.\nGet pnl factor.\nGet pnl factor config.\nGet the excess of pending pnl.\nGet pnl factor with pool value.\nCalculate the pnl value when decreased by the given delta …\nPool.\nGet pool value information after applying delta.\nGet pool value information after applying delta.\nGet the usd value of primary pool.\nGet the usd value of primary pool without pnl for one side.\nPosition.\nGet position.\nCalculates the <code>PositionFees</code> generated by changing the …\nGet position impact distribution params.\nGet the position impact params.\nGet position impact pool.\nGet position impact pool amount.\nGet position impact pool mutably.\nGet basic position params.\nGet position price impact.\nPrice.\nRecord transferred in amount by token.\nRecord transferred out amount by token.\nGet reserve factor.\nGet reserved value.\nGet short delta amount.\nGet the short token amount (when this is a token balance), …\nGet the short amount value in USD.\nGet a reference to the size (in tokens) of the position.\nGet a mutable reference to the size (in tokens) of the …\nGet a reference to the size (in USD) of the position.\nGet a mutable reference to the size (in USD) of the …\nCreate a <code>Swap</code>.\nGet the swap fee params.\nGet the swap impact amount with cap.\nGet swap impact params.\nGet the swap impact pool.\nGet the swap impact pool mutably.\nGet total borrowing pool.\nGet total borrowing pool mutably.\nGet total collateral amount for one token side.\nGet total pending borrowing fees.\nGet total supply of the market token.\nCreate a <code>UpdateBorrowingState</code> action.\nCreate a <code>UpdateFundingState</code> action.\nUpdate global open interest.\nUpdate total borrowing.\nUSD value to market token amount divisor.\nUtils.\nValidate the position.\nValidate max pnl.\nValidate open interest reserve.\nValidate pnl factor.\nValidate (primary) pool amount.\nValidate (primary) pool value for deposit.\nValidate reserve.\nCheck that whether the collateral will be sufficient after …\nCreate a <code>Withdrawal</code>.\nMarket Action.\nThe type of the execution report of the action.\nDecrease Position.\nDeposit.\nDistribute position impact.\nExecute.\nIncrease Position.\nSwap.\nUpdate borrowing state.\nUpdate funding state.\nWithdraw.\nClaimable collateral amounts.\nSwap collateral token to PnL token.\nDecrease the position.\nDecrease Position Flags.\nDecrease Position Params.\nReport of the execution of position decreasing.\nSwap Type for the decrease position action.\nAn iterator over the variants of DecreasePositionSwapType\nNo swap.\nOutput amounts.\nProcessed PnL.\nSwap PnL token to collateral token.\nGet acceptable price.\nGet claimable collateral for holding.\nGet Get claimable collateral for user.\nGet claimable funding amounts.\nGet execution price.\nGet execution fees.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet initial collateral withdrawal amount.\nGet initial size delta in usd.\nGet initial size delta usd.\nGet insolvent close step.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether capping size_delta_usd is allowed.\nWhether capping size_delta_usd is allowed.\nWhether the action is a full close.\nWhether insolvent close is allowed.\nWhether insolvent close is allowed.\nWhether the order is a liquidation order.\nWhether the order is a liquidation order.\nReturns whether the output token (collateral token) is the …\nReturns whether the secondary output token (pnl token) is …\nCreate a new <code>Pnl</code>.\nGet the output amount.\nGet output amount.\nGet output amounts.\nGet output token amount.\nGet processed pnl.\nGet final pnl value.\nGet price impact diff.\nGet price impact value.\nGet prices.\nGet secondary output amount.\nGet secondary output amount.\nGet secondary output token amount.\nSet the swap type.\nReturns whether the position should be removed.\nGet size delta in tokens.\nGet size delta in usd.\nGet the swap type.\nTry to add amount.\nCreate a new action to decrease the given position.\nGet uncapped pnl value.\nGet withdrawable collateral amount.\nA deposit.\nDeposit params.\nReport of the execution of deposit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet long token amount.\nGet long token fees.\nGet long token price.\nGet minted.\nGet the deposit params.\nGet price impact.\nGet short token amount.\nGet short token fees.\nGet short token price.\nCreate a new deposit to the given market.\nDistribute Position Impact.\nDistribute Position Impact Report.\nGet distribution amount.\nGet considered duration in seconds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet Next position impact pool amount.\nExecution Params for increasing position.\nIncrease the position.\nIncrease Position Params.\nReport of the execution of position increasing.\nGet acceptable price.\nGet claimable funding amounts, returns …\nGet collateral delta amount.\nGet collateral increment amount.\nGet execution params.\nGet execution price.\nGet position fees.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet params.\nGet price impact amount.\nGet price impact value.\nGet prices.\nGet size delta in tokens.\nGet size delta USD.\nCreate a new action to increase the given position.\nA swap.\nSwap params.\nReport of the execution of swap.\nExecute the swap.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the in token is long token.\nGet long token price.\nGet swap params.\nGet the price impact for the swap.\nGet the price impact amount.\nGet short token price.\nGet the amount of in token.\nGet token in fees.\nGet the amount of out token.\nCreate a new swap in the given market.\nUpdate Borrowing Report.\nUpdate Borrowing State Action.\nGet considered duration in seconds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet next cumulative borrowing factor\nCreate a new <code>UpdateBorrowingState</code> action.\nUpdate Funding Report.\nUpdate Funding State Action.\nGet delta to claimable funding amount per size.\nGet delta to funding amount per size.\nGet considered duration in seconds.\nCreate a new empty report.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculate next funding amounts per size.\nGet next funding factor per second.\nGet next funding factor per second.\nPack the value to funding amount per size with the given …\nCreate a new <code>UpdateFundingState</code> action.\nCalculate the funding amount for a position and unpack …\nWithdraw params.\nReport of the execution of withdrawal.\nA withdrawal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet long token fees.\nGet the output amount of long tokens.\nGet long token price.\nGet market token amount to burn.\nGet withdraw params.\nGet short token fees.\nGet the output amount of short tokens.\nGet short token price.\nCreate a new withdrawal from the given market.\nA bank of tokens.\nNumber type.\nGet the balance of the given token.\nGet the balance of the given token excluding <code>excluded</code> …\nRecord transferred in amount by token.\nRecord transferred out amount by token.\nADL updated clock for long.\nADL updated clock for short.\nBorrowing.\nThe kind of clocks.\nAn iterator over the variants of ClockKind\nFunding.\nPrice Impact Distribution.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuild params error.\nUnknown computation error.\nConvert error.\nDivided by zero.\nEmpty deposit.\nEmpty swap.\nEmpty withdrawal.\nError type.\nInsufficient funds to pay for cost.\nInsufficient reserve.\nInsufficient reserve for open interest.\nInvalid Argument.\nInvalid pool value.\nInvalid position state.\nInvalid prices.\nInvalid token balance.\nLiquidatable Position.\nMarket errors from [<code>gmsol-utils</code>].\nMax open interest exceeded.\nMax pool amount exceeded.\nMax pool value for deposit exceeded.\nMint receiver not set.\nMissing clock of kind.\nMissing pool of kind.\nNot liquidatable.\nOverflow.\nPnl Factor Exceeded.\nComputation error in pool\nPower computation error.\nAnchor error.\nUnable to get borrowing factor for empty pool value.\nUnable to get funding factor when the open interest is …\nUnimplemented.\nWithdrawal vault not set.\nThe decimals.\nFixed-point decimal type.\nNumber type with the required properties for implementing …\nThe unit value.\nDecimal type with <code>20</code> decimals and backed by <code>u128</code>\nDecimal type with <code>9</code> decimals and backed by <code>u64</code>\nThe unit value (i.e. the value “one”) which is …\nChecked pow.\nFixed point power.\nReturns the argument unchanged.\nCreate a new decimal from the inner representation.\nGet the internal integer representation.\nCalls <code>U::from(self)</code>.\nGet the inner value.\nBase Market trait.\nExtension trait for <code>BaseMarket</code>.\nBase Market trait for mutable access.\nExtension trait for <code>BaseMarketMut</code>.\nA market with borrowing fees.\nExtension trait for <code>BorrowingFeeMarket</code>.\nA market that can update the borrowing fees.\nExtension trait for <code>BorrowingFeeMarketMut</code>.\nFor auto-deleveraging.\nA market for providing liquidity.\nExtension trait of <code>LiquidityMarket</code>.\nA market for providing liquidity.\nExtension trait of <code>LiquidityMarketMut</code>.\nFor deposit.\nFor withdrawal.\nFor trader.\nMin factor after auto-deleveraging.\nUnsigned number type used in the market.\nA perpetual market.\nExtension trait for <code>PerpMarket</code>.\nA mutable perpetual market.\nExtension trait for <code>PerpMarketMut</code>.\nPnl Factor Kind.\nPool type.\nA market with position impact pool.\nExtension trait of <code>PositionImpactMarket</code>.\nA mutable market with position impact pool.\nExtension trait of <code>PositionImpactMarketMut</code>.\nSigned number type used in the market.\nA market for swapping tokens.\nExtension trait for <code>SwapMarket</code>.\nA mutable market for swapping tokens.\nExtension trait for <code>SwapMarketMut</code>.\nApply delta to the primary pool.\nApply delta to claimable fee pool.\nApply delta to claimable funding amount per size.\nApply delta to funding amount per size.\nApply delta to the position impact pool.\nApply a swap impact value to the price impact pool.\nBase Market.\nBorrowing fees utils.\nGet borrowing factor per second.\nGet borrowing factor pool.\nGet borrowing factor pool mutably.\nGet borrowing fee kink model params.\nGet borrowing fee params.\nPerform burn.\nCaps negative position price impact in-place. If <code>impact</code> is …\nCaps positive position price impact in-place. If <code>impact</code> is …\nGet the claimable fee pool.\nGet the mutable reference of the claimable fee pool.\nGet claimable funding amount per size pool.\nGet claimable funding amount per size pool mutably.\nGet current claimable funding fee amount per size.\nGet collateral sum pool.\nGet collateral sum pool mutably.\nGet current borrowing factor.\nCreate a <code>Deposit</code> action.\nCreate a <code>DistributePositionImpact</code> action.\nExpected min token balance excluding collateral amount.\nAdjustment factor for packing funding amount per size.\nGet funding amount per size pool.\nGet funding amount per size pool mutably.\nGet funding factor per second.\nGet funding factor per second mutably.\nGet current funding fee amount per size.\nGet funding fee params.\nReturns whether ignore open interest for usage factor.\nGet the just passed time in seconds for the given kind of …\nGet the just passed time in seconds for the given kind of …\nGet the just passed time in seconds for the given kind of …\nGet liquidation fee params.\nLiquidity Market.\nGet the liquidity pool.\nGet the liquidity pool mutably.\nGet market token price.\nGet max open interest.\nGet max pool amount.\nGet max pool value for deposit.\nGet min collateral factor for open interest.\nGet min collateral factor for open interest multiplier.\nPerform mint.\nGet next cumulative borrowing factor of the given side.\nInsufficient funding fee payment callback.\nGet total open interest as a <code>Balance</code>.\nGet total open interest in tokens as a merged <code>Balance</code>.\nGet the open interest in (index) tokens pool.\nGet mutable reference of open interest pool.\nGet the open interest pool.\nGet mutable reference of open interest pool.\nGet open interest reserve factor.\nGet the order fee params.\nGet the passed time in seconds for the given kind of clock.\nGet the passed time in seconds for the given kind of clock.\nGet pending position impact pool distribution amount.\nPerpetual Market.\nGet total pnl of the market for one side.\nGet pnl factor.\nGet pnl factor config.\nGet the excess of pending pnl.\nGet pnl factor with pool value.\nGet the usd value of primary pool.\nGet the usd value of primary pool without pnl for one side.\nPosition impact utils.\nGet position impact distribution params.\nGet the position impact params.\nGet position impact pool.\nGet position impact pool amount.\nGet position impact pool mutably.\nGet basic position params.\nGet reserve factor.\nGet reserved value.\nSwap Market.\nCreate a <code>Swap</code>.\nGet the swap fee params.\nGet the swap impact amount with cap.\nGet swap impact params.\nGet the swap impact pool.\nGet the swap impact pool mutably.\nGet total borrowing pool.\nGet total borrowing pool mutably.\nGet total collateral amount for one token side.\nGet total pending borrowing fees.\nGet total supply of the market token.\nCreate a <code>UpdateBorrowingState</code> action.\nCreate a <code>UpdateFundingState</code> action.\nUSD value to market token amount divisor.\nValidate max pnl.\nValidate open interest reserve.\nValidate pnl factor.\nValidate (primary) pool amount.\nValidate (primary) pool value for deposit.\nValidate reserve.\nCreate a <code>Withdrawal</code>.\nBase Market trait.\nExtension trait for <code>BaseMarket</code>.\nBase Market trait for mutable access.\nExtension trait for <code>BaseMarketMut</code>.\nFor auto-deleveraging.\nFor deposit.\nFor withdrawal.\nFor trader.\nMin factor after auto-deleveraging.\nUnsigned number type used in the market.\nPnL factor exceeded.\nPnl Factor Kind.\nAn iterator over the variants of PnlFactorKind\nPool type.\nSigned number type used in the market.\nApply delta to the primary pool.\nApply delta to claimable fee pool.\nGet the claimable fee pool.\nGet the mutable reference of the claimable fee pool.\nGet collateral sum pool.\nGet the exceeded pnl.\nExpected min token balance excluding collateral amount.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns whether ignore open interest for usage factor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the liquidity pool.\nGet the liquidity pool mutably.\nGet max open interest.\nMax PnL factor.\nGet max pool amount.\nGet total open interest as a <code>Balance</code>.\nGet total open interest in tokens as a merged <code>Balance</code>.\nGet the open interest in (index) tokens pool.\nGet the open interest pool.\nGet open interest reserve factor.\nGet total pnl of the market for one side.\nGet pnl factor.\nCurrent PnL factor.\nGet pnl factor config.\nGet the excess of pending pnl.\nGet pnl factor with pool value.\nCurrent pool value.\nGet the usd value of primary pool without pnl for one side.\nGet reserve factor.\nGet reserved value.\nGet the swap impact pool.\nGet total collateral amount for one token side.\nUSD value to market token amount divisor.\nValidate max pnl.\nValidate pnl factor.\nValidate (primary) pool amount.\nValidate reserve.\nA market with borrowing fees.\nExtension trait for <code>BorrowingFeeMarket</code>.\nA market that can update the borrowing fees.\nExtension trait for <code>BorrowingFeeMarketMut</code>.\nGet borrowing factor per second.\nGet borrowing factor pool.\nGet borrowing factor pool mutably.\nGet borrowing fee kink model params.\nGet borrowing fee params.\nGet current borrowing factor.\nGet the just passed time in seconds for the given kind of …\nGet next cumulative borrowing factor of the given side.\nGet the passed time in seconds for the given kind of clock.\nGet total borrowing pool.\nGet total pending borrowing fees.\nCreate a <code>UpdateBorrowingState</code> action.\nA market for providing liquidity.\nExtension trait of <code>LiquidityMarket</code>.\nA market for providing liquidity.\nExtension trait of <code>LiquidityMarketMut</code>.\nPerform burn.\nCreate a <code>Deposit</code> action.\nGet market token price.\nGet max pool value for deposit.\nPerform mint.\nGet the usd value of primary pool.\nGet total supply of the market token.\nValidate (primary) pool value for deposit.\nCreate a <code>Withdrawal</code>.\nA perpetual market.\nExtension trait for <code>PerpMarket</code>.\nA mutable perpetual market.\nExtension trait for <code>PerpMarketMut</code>.\nApply delta to claimable funding amount per size.\nApply delta to funding amount per size.\nCaps negative position price impact in-place. If <code>impact</code> is …\nCaps positive position price impact in-place. If <code>impact</code> is …\nGet claimable funding amount per size pool.\nGet claimable funding amount per size pool mutably.\nGet current claimable funding fee amount per size.\nGet collateral sum pool mutably.\nAdjustment factor for packing funding amount per size.\nGet funding amount per size pool.\nGet funding amount per size pool mutably.\nGet funding factor per second.\nGet funding factor per second mutably.\nGet current funding fee amount per size.\nGet funding fee params.\nGet the just passed time in seconds for the given kind of …\nGet liquidation fee params.\nGet min collateral factor for open interest.\nGet min collateral factor for open interest multiplier.\nInsufficient funding fee payment callback.\nGet mutable reference of open interest pool.\nGet mutable reference of open interest pool.\nGet the order fee params.\nGet basic position params.\nGet total borrowing pool mutably.\nCreate a <code>UpdateFundingState</code> action.\nValidate open interest reserve.\nA market with position impact pool.\nExtension trait of <code>PositionImpactMarket</code>.\nA mutable market with position impact pool.\nExtension trait of <code>PositionImpactMarketMut</code>.\nApply delta to the position impact pool.\nCreate a <code>DistributePositionImpact</code> action.\nGet the just passed time in seconds for the given kind of …\nGet the passed time in seconds for the given kind of clock.\nGet pending position impact pool distribution amount.\nGet position impact distribution params.\nGet the position impact params.\nGet position impact pool.\nGet position impact pool amount.\nGet position impact pool mutably.\nA market for swapping tokens.\nExtension trait for <code>SwapMarket</code>.\nA mutable market for swapping tokens.\nExtension trait for <code>SwapMarketMut</code>.\nApply a swap impact value to the price impact pool.\nCreate a <code>Swap</code>.\nGet the swap fee params.\nGet the swap impact amount with cap.\nGet swap impact params.\nGet the swap impact pool mutably.\nPerform Mul-Div calculation with bigger range num type.\nNum trait used in GMX.\nThe signed type.\nUnsigned value that cannot be negative.\nUnsigned type.\nConvert signed value to unsigned.\nAs divisor to checked divide other and round up magnitude.\nBound the magnitude of a signed value.\nChecked signed add.\nCalculates floor(self * numerator / denominator) with full …\nCalculates ceil(self * numerator / denominator) with full …\nCalculates floor(self * numerator / denominator) with full …\nChecked signed mul.\nChecked round up division.\nCompute signed <code>self - other</code>.\nChecked signed sub.\nCompute the absolute difference of two values.\nConvert to opposite signed.\nConvert to a signed value\nConvert to a signed value with the given sign.\nComputes the absolute value and returns as a unsigned …\nA generic interface for casting between machine scalars …\nNumbers which have upper and lower bounds\nPerforms addition that returns <code>None</code> instead of wrapping …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms negation that returns <code>None</code> if the result can’t …\nPerforms an integral remainder that returns <code>None</code> instead …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nDefines an associated constant representing the …\nDefines an associated constant representing the additive …\nReturn Euler’s number.\nReturn <code>1.0 / π</code>.\nReturn <code>1.0 / sqrt(2.0)</code>.\nReturn <code>2.0 / π</code>.\nReturn <code>2.0 / sqrt(π)</code>.\nReturn <code>π / 2.0</code>.\nReturn <code>π / 3.0</code>.\nReturn <code>π / 4.0</code>.\nReturn <code>π / 6.0</code>.\nReturn <code>π / 8.0</code>.\nGeneric trait for floating point numbers\nA generic trait for converting a number to a value.\nUnary operator for retrieving the multiplicative inverse, …\nReturn <code>ln(10.0)</code>.\nReturn <code>ln(2.0)</code>.\nReturn <code>log10(2.0)</code>.\nReturn <code>log10(e)</code>.\nReturn <code>log2(10.0)</code>.\nReturn <code>log2(e)</code>.\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nThe fused multiply-add assignment operation …\nThe base trait for numeric types, covering <code>0</code> and <code>1</code> values, …\nThe trait for <code>Num</code> types which also implement assignment …\nGeneric trait for types implementing numeric assignment …\nThe trait for <code>NumAssign</code> types which also implement …\nAn interface for casting between machine scalars.\nGeneric trait for types implementing basic numeric …\nThe trait for <code>Num</code> types which also implement numeric …\nThe multiplicative identity element of <code>Self</code>, <code>1</code>.\nDefines a multiplicative identity element for <code>Self</code>.\nThe result after applying the operator.\nThe resulting type after applying the fused multiply-add.\nThe result after applying the operator.\nReturn Archimedes’ constant <code>π</code>.\nBinary operator for raising a value to a power.\nGeneric trait for primitive integers.\nThe trait for <code>Num</code> references which implement numeric …\nReturn <code>sqrt(2.0)</code>.\nSaturating math operations. Deprecated, use <code>SaturatingAdd</code>, …\nPerforms addition that saturates at the numeric bounds …\nPerforms multiplication that saturates at the numeric …\nPerforms subtraction that saturates at the numeric bounds …\nUseful functions for signed numbers (i.e. numbers that can …\nReturn the full circle constant <code>τ</code>.\nA generic trait for converting a value to a number.\nA trait for values which cannot be negative\nPerforms addition that wraps around on overflow.\nPerforms multiplication that wraps around on overflow.\nPerforms a negation that does not panic.\nPerforms a left shift that does not panic.\nPerforms a right shift that does not panic.\nPerforms subtraction that wraps around on overflow.\nThe additive identity element of <code>Self</code>, <code>0</code>.\nDefines an additive identity element for <code>Self</code>.\nComputes the absolute value.\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nComputes the absolute value.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nConvert a value to another, using the <code>as</code> operator.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nCast from one machine scalar to another.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nPerforms euclid division that returns <code>None</code> instead of …\nReturns both the quotient and remainder from checked …\nMultiplies two numbers, checking for underflow or …\nNegates a number, returning <code>None</code> for results that can’t …\nRaises a value to the power of exp, returning <code>None</code> if an …\nFinds the remainder of dividing two numbers, checking for …\nFinds the euclid remainder of dividing two numbers, …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nA value bounded by a minimum and a maximum\nClamps a value between a min and max.\nA value bounded by a maximum value\nA value bounded by a minimum value\nReturns the floating point category of the number. If only …\nReturns a number composed of the magnitude of <code>self</code> and the …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nCalculates Euclidean division, the matching method for …\nReturns both the quotient and remainder from Euclidean …\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nCreates a number from another value that can be converted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an integer from big endian to the target’s …\nCreate a number from its representation as a byte array in …\nConverts a <code>f32</code> to return an optional value of this type. …\nConverts a <code>f64</code> to return an optional value of this type. …\nConverts an <code>i128</code> to return an optional value of this type. …\nConverts an <code>i16</code> to return an optional value of this type. …\nConverts an <code>i32</code> to return an optional value of this type. …\nConverts an <code>i64</code> to return an optional value of this type. …\nConverts an <code>i8</code> to return an optional value of this type. …\nConverts an <code>isize</code> to return an optional value of this …\nConvert an integer from little endian to the target’s …\nCreate a number from its representation as a byte array in …\nCreate a number from its memory representation as a byte …\nConvert from a string and radix (typically <code>2..=36</code>).\nConverts an <code>u128</code> to return an optional value of this type. …\nConverts an <code>u16</code> to return an optional value of this type. …\nConverts an <code>u32</code> to return an optional value of this type. …\nConverts an <code>u64</code> to return an optional value of this type. …\nConverts an <code>u8</code> to return an optional value of this type. …\nConverts a <code>usize</code> to return an optional value of this type. …\nCalculate the length of the hypotenuse of a right-angle …\nReturns the infinite value.\nReturns the mantissa, base 2 exponent, and sign as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the multiplicative inverse of <code>self</code>.\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nReturns true if the number is negative and false if the …\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns true if the number is positive and false if the …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns <code>true</code> if the number is subnormal.\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the largest finite number this type can represent\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite number this type can represent\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nPerforms the fused multiply-add operation <code>(self * a) + b</code>\nPerforms the fused multiply-add assignment operation …\nReturns the <code>NaN</code> value.\nReturns the negative infinite value.\nReturns <code>-0.0</code>.\nReturns the multiplicative identity, <code>1</code>.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nRaises a value to the power of exp, using exponentiation …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nReturns <code>self</code> to the power <code>rhs</code>.\nRaise a number to a floating point power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nCalculates the least nonnegative remainder of <code>self (mod v)</code>.\nReverses the order of bits in the integer.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReturns the nearest integer to a number. Round half-way …\nSaturating addition operator. Returns a+b, saturating at …\nSaturating addition. Computes <code>self + other</code>, saturating at …\nSaturating multiplication. Computes <code>self * other</code>, …\nSaturating subtraction operator. Returns a-b, saturating …\nSaturating subtraction. Computes <code>self - other</code>, saturating …\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReturns the sign of the number.\nReturns a number that represents the sign of <code>self</code>.\nReturns the sign of the number.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nReverses the byte order of the integer.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConvert <code>self</code> to big endian from the target’s endianness.\nReturn the memory representation of this number as a byte …\nConverts radians to degrees.\nConverts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>i128</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i16</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i32</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i64</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nConverts the value of <code>self</code> to an <code>isize</code>. If the value …\nConvert <code>self</code> to little endian from the target’s …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nConverts degrees to radians.\nConverts the value of <code>self</code> to a <code>u128</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …\nConverts the value of <code>self</code> to a <code>usize</code>. If the value cannot …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the binary …\nReturn the integer part of a number.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nWrapping (modular) addition. Computes <code>self + other</code>, …\nWrapping (modular) multiplication. Computes <code>self * other</code>, …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nPanic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …\nPanic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …\nWrapping (modular) subtraction. Computes <code>self - other</code>, …\nReturns the additive identity, <code>0</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nNumbers which have upper and lower bounds\nNumbers which have lower bounds\nNumbers which have upper bounds\nReturns the largest finite number this type can represent\nReturns the largest finite number this type can represent\nReturns the smallest finite number this type can represent\nReturns the smallest finite number this type can represent\nA generic interface for casting between machine scalars …\nA generic trait for converting a number to a value.\nAn interface for casting between machine scalars.\nA generic trait for converting a value to a number.\nConvert a value to another, using the <code>as</code> operator.\nCast from one machine scalar to another.\nCreates a number from another value that can be converted …\nConverts a <code>f32</code> to return an optional value of this type. …\nConverts a <code>f64</code> to return an optional value of this type. …\nConverts an <code>i128</code> to return an optional value of this type. …\nConverts an <code>i16</code> to return an optional value of this type. …\nConverts an <code>i32</code> to return an optional value of this type. …\nConverts an <code>i64</code> to return an optional value of this type. …\nConverts an <code>i8</code> to return an optional value of this type. …\nConverts an <code>isize</code> to return an optional value of this …\nConverts an <code>u128</code> to return an optional value of this type. …\nConverts an <code>u16</code> to return an optional value of this type. …\nConverts an <code>u32</code> to return an optional value of this type. …\nConverts an <code>u64</code> to return an optional value of this type. …\nConverts an <code>u8</code> to return an optional value of this type. …\nConverts a <code>usize</code> to return an optional value of this type. …\nConverts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>i128</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i16</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i32</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i64</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nConverts the value of <code>self</code> to an <code>isize</code>. If the value …\nConverts the value of <code>self</code> to a <code>u128</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …\nConverts the value of <code>self</code> to a <code>usize</code>. If the value cannot …\nReturn Euler’s number.\nReturn <code>1.0 / π</code>.\nReturn <code>1.0 / sqrt(2.0)</code>.\nReturn <code>2.0 / π</code>.\nReturn <code>2.0 / sqrt(π)</code>.\nReturn <code>π / 2.0</code>.\nReturn <code>π / 3.0</code>.\nReturn <code>π / 4.0</code>.\nReturn <code>π / 6.0</code>.\nReturn <code>π / 8.0</code>.\nGeneric trait for floating point numbers\nGeneric trait for floating point numbers that works with …\nReturn <code>ln(10.0)</code>.\nReturn <code>ln(2.0)</code>.\nReturn <code>log10(2.0)</code>.\nReturn <code>log10(e)</code>.\nReturn <code>log2(10.0)</code>.\nReturn <code>log2(e)</code>.\nReturn Archimedes’ constant <code>π</code>.\nReturn <code>sqrt(2.0)</code>.\nReturn the full circle constant <code>τ</code>.\nTrait for floating point numbers that provide an …\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nComputes the absolute value of <code>self</code>. Returns …\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nReturns the smallest integer greater than or equal to a …\nA value bounded by a minimum and a maximum\nClamps a value between a min and max.\nReturns the floating point category of the number. If only …\nReturns the floating point category of the number. If only …\nReturns a number composed of the magnitude of <code>self</code> and the …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns epsilon, a small positive value.\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nReturns the fractional part of a number.\nCalculate the length of the hypotenuse of a right-angle …\nReturns positive infinity.\nReturns the infinite value.\nReturns the mantissa, base 2 exponent, and sign as …\nReturns the mantissa, base 2 exponent, and sign as …\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if the number is neither infinite or NaN.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if the number is infinite.\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nReturns <code>true</code> if the number is NaN.\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …\nReturns <code>true</code> if the number is subnormal.\nReturns <code>true</code> if the number is subnormal.\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the maximum of the two numbers.\nReturns the largest finite value that this type can …\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite value that this type can …\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nReturns NaN.\nReturns the <code>NaN</code> value.\nReturns negative infinity.\nReturns the negative infinite value.\nReturns <code>-0.0</code>.\nReturns <code>-0.0</code>.\nRaise a number to a floating point power.\nRaise a number to an integer power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nReturns the reciprocal (multiplicative inverse) of the …\nReturns the nearest integer to a number. Round half-way …\nReturns the nearest integer to a number. Round half-way …\nReturns a number that represents the sign of <code>self</code>.\nReturns a number that represents the sign of <code>self</code>.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConverts to degrees, assuming the number is in radians.\nConverts radians to degrees.\nConverts to radians, assuming the number is in degrees.\nConverts degrees to radians.\nReturn the ordering between <code>self</code> and <code>other</code>.\nReturn the integer part of a number.\nReturn the integer part of a number.\nDefines an associated constant representing the …\nDefines an associated constant representing the additive …\nThe multiplicative identity element of <code>Self</code>, <code>1</code>.\nDefines a multiplicative identity element for <code>Self</code>.\nThe additive identity element of <code>Self</code>, <code>0</code>.\nDefines an additive identity element for <code>Self</code>.\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns the multiplicative identity, <code>1</code>.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nReturns the additive identity, <code>0</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nGeneric trait for primitive integers.\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nConvert an integer from big endian to the target’s …\nConvert an integer from little endian to the target’s …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nReverses the order of bits in the integer.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReverses the byte order of the integer.\nConvert <code>self</code> to big endian from the target’s endianness.\nConvert <code>self</code> to little endian from the target’s …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the binary …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nCreate a number from its representation as a byte array in …\nCreate a number from its representation as a byte array in …\nCreate a number from its memory representation as a byte …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nPerforms addition that returns <code>None</code> instead of wrapping …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms negation that returns <code>None</code> if the result can’t …\nPerforms an integral remainder that returns <code>None</code> instead …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nMultiplies two numbers, checking for underflow or …\nNegates a number, returning <code>None</code> for results that can’t …\nFinds the remainder of dividing two numbers, checking for …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nPerforms euclid division that returns <code>None</code> instead of …\nReturns both the quotient and remainder from checked …\nFinds the euclid remainder of dividing two numbers, …\nCalculates Euclidean division, the matching method for …\nReturns both the quotient and remainder from Euclidean …\nCalculates the least nonnegative remainder of <code>self (mod v)</code>.\nUnary operator for retrieving the multiplicative inverse, …\nThe result after applying the operator.\nReturns the multiplicative inverse of <code>self</code>.\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nThe fused multiply-add assignment operation …\nThe resulting type after applying the fused multiply-add.\nPerforms the fused multiply-add operation <code>(self * a) + b</code>\nPerforms the fused multiply-add assignment operation …\nPerforms addition with a flag for overflow.\nPerforms multiplication with a flag for overflow.\nPerforms substraction with a flag for overflow.\nReturns a tuple of the sum along with a boolean indicating …\nReturns a tuple of the product along with a boolean …\nReturns a tuple of the difference along with a boolean …\nSaturating math operations. Deprecated, use <code>SaturatingAdd</code>, …\nPerforms addition that saturates at the numeric bounds …\nPerforms multiplication that saturates at the numeric …\nPerforms subtraction that saturates at the numeric bounds …\nSaturating addition operator. Returns a+b, saturating at …\nSaturating addition. Computes <code>self + other</code>, saturating at …\nSaturating multiplication. Computes <code>self * other</code>, …\nSaturating subtraction operator. Returns a-b, saturating …\nSaturating subtraction. Computes <code>self - other</code>, saturating …\nPerforms addition that wraps around on overflow.\nPerforms multiplication that wraps around on overflow.\nPerforms a negation that does not panic.\nPerforms a left shift that does not panic.\nPerforms a right shift that does not panic.\nPerforms subtraction that wraps around on overflow.\nWrapping (modular) addition. Computes <code>self + other</code>, …\nWrapping (modular) multiplication. Computes <code>self * other</code>, …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nPanic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …\nPanic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …\nWrapping (modular) subtraction. Computes <code>self - other</code>, …\nThe result after applying the operator.\nBinary operator for raising a value to a power.\nRaises a value to the power of exp, returning <code>None</code> if an …\nRaises a value to the power of exp, using exponentiation …\nReturns <code>self</code> to the power <code>rhs</code>.\nA trait for real number types that do not necessarily have …\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nCalculate the length of the hypotenuse of a right-angle …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nRaise a number to a real number power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nReturns the nearest integer to a number. Round half-way …\nReturns a number that represents the sign of <code>self</code>.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConverts radians to degrees.\nConverts degrees to radians.\nReturn the integer part of a number.\nUseful functions for signed numbers (i.e. numbers that can …\nA trait for values which cannot be negative\nComputes the absolute value.\nComputes the absolute value.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nReturns true if the number is negative and false if the …\nReturns true if the number is positive and false if the …\nReturns the sign of the number.\nReturns the sign of the number.\nFee Parameters.\nFees.\nBasic Position Parameters.\nPrice impact parameters.\nGet adjusted swap factors.\nApply fees to <code>amount</code>.\nGet position fees with only order fees considered.\nCreate a builder for building <code>PriceImpactParams</code>. On the …\nCreate a builder for building <code>PositionParams</code>. On the …\nCreate a builder for building <code>FeeParams</code>. On the builder, …\nExponent.\nFee Parameters.\nGet basic fee.\nGet fee amount for pool.\nGet fee amount for receiver\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet max negative position impact factor.\nGet max position impact factor for liquidations.\nGet max positive position impact factor.\nGet min collateral factor.\nGet min collateral value.\nGet min position size usd.\nNegative factor.\nCreate a new <code>PositionParams</code>.\nCreate a new <code>Fees</code>.\nPosition parameters.\nPositive factor.\nPrice Impact Parameters.\nGet receiver factor.\nGet receiver fee.\nSet discount factor.\nBorrowing Fee Kink Model Parameters.\nBorrowing Fee Kink Model Parameters for one side.\nBorrowing Fee Parameters.\nBorrowing Fee.\nDecrease.\nFee Parameters.\nFees.\nFunding Fee Parameters.\nFunding Fees.\nFunding Rate Change Type.\nIncrease.\nLiquidation Fee Parameters.\nLiquidation Fees.\nNo Change.\nOrder Fees.\nPosition Fees.\nGet above optimal usage borrowing factor.\nGet funding fee amount.\nGet base borrowing factor.\nCalculate borrowing factor per second.\nGet borrowing fees.\nCreate a builder for building <code>BorrowingFeeParams</code>. On the …\nCreate a builder for building <code>BorrowingFeeKinkModelParams</code>. …\nCreate a builder for building …\nCreate a builder for building <code>FundingFeeParams</code>. On the …\nCreate a builder for building <code>LiquidationFeeParams</code>. On the …\nCreate a builder for building <code>FundingFees</code>. On the builder, …\nGet change type for next funding rate.\nGet claimable long token funding fee amount.\nGet claimable short token funding fee amount.\nClear fees excluding funding fee.\nGet funding decrease factor per second.\nGet borrowing exponent factor.\nGet funding exponent factor.\nGet borrowing factor.\nFallback funding factor.\nGet total borrowing fee amount.\nGet total liquidation fee amount.\nGet borrowing fee amount for pool.\nGet liquidation fee amount for pool.\nGet borrowing fee amount for receiver.\nGet liquidation fee amount for receiver.\nGet fee amounts.\nGet order fee value.\nGet total liquidation fee value.\nGet fee for pool.\nGet fee for receiver.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet funding fees.\nGet funding increase factor per second.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet liquidation fees.\nGet max funding factor per second.\nGet min funding factor per second.\nGet optimal usage factor.\nGet order fees.\nGet paid order fee value.\nGet borrowing fee receiver factor.\nSet borrowing fees.\nSet funding fees.\nSet liquidation fees.\nGet whether to skip borrowing fee for smaller side.\nThreshold for decrease funding.\nThreshold for stable funding.\nGet total cost amount in collateral tokens.\nGet total cost excluding funding fee.\nPosition Impact Distribution Parameters.\nBasic Position Parameters.\nCreate a builder for building …\nGet distribution rate factor.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet min position impact pool amount.\nPrice impact parameters.\nBalanced amounts.\nExtension trait for <code>Balance</code> with utils.\nBorrowing factor.\nClaimable fee.\nClaimable funding amount per size for long.\nClaimable funding amount per size for short.\nCollateral sum for long.\nCollateral sum for short.\nDelta Amounts.\nFunding amount per size for long.\nFunding amount per size for short.\nUnsigned number type.\nOpen Interest for long.\nOpen Interest for short.\nOpen Interest in tokens for long.\nOpen Interest in tokens for short.\nA balance for holding tokens, usd values, or factors\nExtension trait for <code>Pool</code> with utils.\nPool kind.\nAn iterator over the variants of PoolKind\nPosition impact.\nPrimary liquidity pool.\nSigned number type.\nSwap impact.\nTotal borrowing.\nGet amount by side.\nApply delta.\nApply delta to long amount.\nApply delta to short amount.\nBalance.\nChecked apply delta amounts.\nDelta.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the long token amount (when this is a token balance), …\nGet the long amount value in USD.\nMerge the amounts with other <code>Balance</code>.\nGet pool value information after applying delta.\nGet pool value information after applying delta.\nGet the short token amount (when this is a token balance), …\nGet the short amount value in USD.\nBalanced amounts.\nExtension trait for <code>Balance</code> with utils.\nMerged balanced pool. A <code>Balance</code> returned by …\nUnsigned number type.\nSigned number type.\nGet amount by side.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the long token amount (when this is a token balance), …\nGet the long amount value in USD.\nMerge the amounts with other <code>Balance</code>.\nGet pool value information after applying delta.\nGet pool value information after applying delta.\nGet the short token amount (when this is a token balance), …\nGet the short amount value in USD.\nDelta Amounts.\nDelta of pool usd values.\nUsd values of pool.\nGet delta values.\nGet usd value (abs) difference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitial diff usd value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether it is a same side rebalance.\nGet long token usd value.\nNext diff usd value.\nCalculate price impact.\nGet short token usd value.\nCreate a new <code>PoolDelta</code>.\nCreate a new <code>PoolValue</code> from the given pool and prices.\nCreate a new <code>PoolDelta</code>.\nCollateral Delta Values.\nPrice impact diff.\nFees.\nFunding fees.\nPrice impact.\nInsolvent Close Step.\nWon’t be sufficient.\nLiquidatable reason.\nMarket type.\nMin collateral.\nMin collateral for leverage.\nRemaining collateral not positive.\nUnsigned number type.\nPnL.\nPosition with access to its market.\nExtension trait for <code>Position</code> with utils.\nPosition with mutable access.\nExtension trait for <code>PositionMut</code> with utils.\nRead-only access to the position state.\nExtension trait for <code>PositionState</code>.\nMutable access to the position state.\nSigned number type.\nWill be sufficient.\nWill collateral be sufficient.\nReturns whether the pnl and collateral tokens are the same.\nGet a reference to last borrowing factor applied by the …\nGet a mutable reference to last borrowing factor applied …\nGet capped position price impact usd.\nGet position price impact usd and cap the value if it is …\nCheck if the position is liquidatable.\nGet a reference to claimable funding fee amount per size …\nGet a mutable reference to claimable funding fee amount …\nGet the collateral amount.\nGet a mutable reference to the collateral amount.\nGet collateral price.\nGet collateral value.\nCreate an action to decrease the position.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the funding fee amount per size.\nGet a mutable reference to the funding fee amount per size.\nCreate an action to increase the position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the collateral token is the long token of …\nReturn whether the position is considered to be empty …\nReturns whether the position is a long position.\nReturns whether it is sufficient.\nGet a reference to the market.\nGet a mutable reference to the market.\nCreate a new collateral delta.\nDecreased callback.\nIncreased callback.\nHandle swap error.\nSwapped callback.\nCalled from <code>validate_position</code> to add supplementary checks.\nGet pending borrowing fee value of this position.\nGet pending funding fees.\nCalculate the pnl value when decreased by the given delta …\nCalculates the <code>PositionFees</code> generated by changing the …\nGet position price impact.\nGet a reference to the size (in tokens) of the position.\nGet a mutable reference to the size (in tokens) of the …\nGet a reference to the size (in USD) of the position.\nGet a mutable reference to the size (in USD) of the …\nUpdate global open interest.\nUpdate total borrowing.\nValidate the position.\nCheck that whether the collateral will be sufficient after …\nPrice.\nPrices for execution.\nGet mid price checked.\nGet collateral token price.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn whether the min price or max price is zero.\nIndex token price.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the prices is valid.\nLong token price.\nMaximum Price.\nGet mid price.\nMinimum Price.\nPick price.\nPick price for PnL.\nShort token price.\nValidate the prices.\nApply exponent factor using this formula: <code>x^E</code>.\nApply factor using this formula: <code>A * x</code>.\nApply factors using this formula: <code>A * x^E</code>.\nConvert the <code>value</code> to a factor after dividing by the <code>divisor</code>…\nConvert the <code>value</code> to a factor after dividing by the <code>divisor</code>…\nMarket token amount to usd value.\nUsd value to market token amount.\nSeed for claimable account.\nSeed for <code>Deposit</code>.\nSeed for event authority.\nSeed for first deposit receiver.\nSeed for <code>GlvDeposit</code>.\nSeed for <code>Glv</code>.\nSeed for GLV token mint.\nSeed for <code>GlvWithdrawal</code>.\nSeed for <code>GtExchange</code>.\nSeed for <code>GtExchangeVault</code>.\nSeed for market token mint.\nSeed for <code>Market</code>.\nSeed for market vault.\nNonce bytes.\nSeed for <code>Order</code>.\nSeed for <code>Position</code>.\nSeed for <code>PriceFeed</code>.\nSeed for <code>ReferralCodeV2</code>.\nReferral code bytes.\nSeed for <code>Shift</code>.\nSeed for <code>Store</code>.\nSeed for store wallet.\nSeed for trade event buffer account.\nSeed for <code>User</code>.\nSeed for <code>Withdrawal</code>.\nFind PDA for claimable account.\nFind PDA for deposit.\nFind PDA for <code>event_authority</code> account.\nFind PDA for first deposit receiver.\nFind PDA GLV account.\nFind PDA for a GLV deposit account.\nFind PDA for GLV token.\nFind PDA for a GLV withdrawal account.\nFind PDA for GT exchange account.\nFind PDA for GT exchange vault account.\nFind PDA for <code>Market</code> account.\nFind PDA for Market token mint account.\nFind PDA for market vault.\nFind PDA for <code>Order</code> account.\nFind PDA for position.\nFint PDA for custom price feed account.\nFind PDA for referral code account.\nFind PDA for shift.\nFind PDA for <code>Store</code> account.\nFind PDA for store wallet account.\nFind PDA for trade event buffer.\nFind PDA for <code>User</code> account.\nFind PDA for withdrawal.\nPosition Calculations.\nPosition status.\nCalculate position status.\nPosition Status.\nClose order fee value.\nCollateral value.\nEntry price.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLeverage.\nLiquidation price.\nNet value.\nPending borrowing fee value.\nPending claimable funding fee value in long token.\nPending claimable funding fee value in short token.\nPending funding fee value.\nPending PnL.\nBase64 utils.\nFixed number convertions.\nFixed str.\nOptional account utils.\nSerialization utils.\nWorkaround for deserializing ZeroCopy accounts.\nDecode base64\nEncode base64\nConvert signed fixed-point amount to <code>Decimal</code>.\nConvert signed fixed-point value to <code>Decimal</code>.\nConvert signed USD value to <code>Decimal</code>.\nConvert unsigned fixed-point amount to <code>Decimal</code>.\nConvert unsigned fixed-point number to <code>Decimal</code>.\nConvert unsigned USD value to <code>Decimal</code>.\nBytes to fixed size string.\nFixed size string to bytes.\nThe “default” pubkey.\nChange the <code>pubkey</code> of any readonly, non-signer <code>AccountMeta</code> …\nParse optional address where the default pubkey is treated …\nA wrapper for <code>Pubkey</code>, allowing it to be serialized to and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWorkaround for deserializing zero-copy accounts and …\nWorkaround for deserializing zero-copy accounts.\nCheck discriminator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConver into inner value.\nConver into inner value.\nA workaround to deserialize “zero-copy” account data.\nA workaround to deserialize “zero-copy” account data.\nDeserialize a <code>ZeroCopy</code> structure.\nDeserialize a <code>ZeroCopy</code> structure from base64.")